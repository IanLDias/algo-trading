Help on class Client in module binance.client:

class CClliieenntt(BaseClient)
 |  Client(api_key: Union[str, NoneType] = None, api_secret: Union[str, NoneType] = None, requests_params: Dict[str, str] = None, tld: str = 'com', testnet: bool = False)
 |  
 |  Method resolution order:
 |      Client
 |      BaseClient
 |      builtins.object
 |  
 |  Methods defined here:
 |  
 |  ____iinniitt____(self, api_key: Union[str, NoneType] = None, api_secret: Union[str, NoneType] = None, requests_params: Dict[str, str] = None, tld: str = 'com', testnet: bool = False)
 |      Binance API Client constructor
 |      
 |      :param api_key: Api Key
 |      :type api_key: str.
 |      :param api_secret: Api Secret
 |      :type api_secret: str.
 |      :param requests_params: optional - Dictionary of requests params to use for all calls
 |      :type requests_params: dict.
 |      :param testnet: Use testnet environment - only available for vanilla options at the moment
 |      :type testnet: bool
 |  
 |  aaggggrreeggaattee__ttrraaddee__iitteerr(self, symbol: str, start_str=None, last_id=None)
 |      Iterate over aggregate trade data from (start_time or last_id) to
 |      the end of the history so far.
 |      
 |      If start_time is specified, start with the first trade after
 |      start_time. Meant to initialise a local cache of trade data.
 |      
 |      If last_id is specified, start with the trade after it. This is meant
 |      for updating a pre-existing local trade data cache.
 |      
 |      Only allows start_str or last_idâ€”not both. Not guaranteed to work
 |      right if you're running more than one of these simultaneously. You
 |      will probably hit your rate limit.
 |      
 |      See dateparser docs for valid start and end string formats http://dateparser.readthedocs.io/en/latest/
 |      
 |      If using offset strings for dates add "UTC" to date string e.g. "now UTC", "11 hours ago UTC"
 |      
 |      :param symbol: Symbol string e.g. ETHBTC
 |      :type symbol: str
 |      :param start_str: Start date string in UTC format or timestamp in milliseconds. The iterator will
 |      return the first trade occurring later than this time.
 |      :type start_str: str|int
 |      :param last_id: aggregate trade ID of the last known aggregate trade.
 |      Not a regular trade ID. See https://github.com/binance/binance-spot-api-docs/blob/master/rest-api.md#compressedaggregate-trades-list.
 |      
 |      :returns: an iterator of JSON objects, one per trade. The format of
 |      each object is identical to Client.aggregate_trades().
 |      
 |      :type last_id: int
 |  
 |  ccaanncceell__mmaarrggiinn__oorrddeerr(self, **params)
 |      Cancel an active order for margin account.
 |      
 |      Either orderId or origClientOrderId must be sent.
 |      
 |      https://binance-docs.github.io/apidocs/spot/en/#margin-account-cancel-order-trade
 |      
 |      :param symbol: required
 |      :type symbol: str
 |      :param isIsolated: set to 'TRUE' for isolated margin (default 'FALSE')
 |      :type isIsolated: str
 |      :param orderId:
 |      :type orderId: str
 |      :param origClientOrderId:
 |      :type origClientOrderId: str
 |      :param newClientOrderId: Used to uniquely identify this cancel. Automatically generated by default.
 |      :type newClientOrderId: str
 |      :param recvWindow: the number of milliseconds the request is valid for
 |      :type recvWindow: int
 |      
 |      :returns: API response
 |      
 |          {
 |              "symbol": "LTCBTC",
 |              "orderId": 28,
 |              "origClientOrderId": "myOrder1",
 |              "clientOrderId": "cancelMyOrder1",
 |              "transactTime": 1507725176595,
 |              "price": "1.00000000",
 |              "origQty": "10.00000000",
 |              "executedQty": "8.00000000",
 |              "cummulativeQuoteQty": "8.00000000",
 |              "status": "CANCELED",
 |              "timeInForce": "GTC",
 |              "type": "LIMIT",
 |              "side": "SELL"
 |          }
 |      
 |      :raises: BinanceRequestException, BinanceAPIException
 |  
 |  ccaanncceell__oorrddeerr(self, **params)
 |      Cancel an active order. Either orderId or origClientOrderId must be sent.
 |      
 |      https://github.com/binance/binance-spot-api-docs/blob/master/rest-api.md#cancel-order-trade
 |      
 |      :param symbol: required
 |      :type symbol: str
 |      :param orderId: The unique order id
 |      :type orderId: int
 |      :param origClientOrderId: optional
 |      :type origClientOrderId: str
 |      :param newClientOrderId: Used to uniquely identify this cancel. Automatically generated by default.
 |      :type newClientOrderId: str
 |      :param recvWindow: the number of milliseconds the request is valid for
 |      :type recvWindow: int
 |      
 |      :returns: API response
 |      
 |      .. code-block:: python
 |      
 |          {
 |              "symbol": "LTCBTC",
 |              "origClientOrderId": "myOrder1",
 |              "orderId": 1,
 |              "clientOrderId": "cancelMyOrder1"
 |          }
 |      
 |      :raises: BinanceRequestException, BinanceAPIException
 |  
 |  cchhaannggee__ffiixxeedd__aaccttiivviittyy__ttoo__ddaaiillyy__ppoossiittiioonn(self, **params)
 |      Change Fixed/Activity Position to Daily Position
 |      
 |      https://binance-docs.github.io/apidocs/spot/en/#change-fixed-activity-position-to-daily-position-user_data
 |  
 |  ccrreeaattee__iissoollaatteedd__mmaarrggiinn__aaccccoouunntt(self, **params)
 |      Create isolated margin account for symbol
 |      
 |      https://binance-docs.github.io/apidocs/spot/en/#create-isolated-margin-account-margin
 |      
 |      :param base: Base asset of symbol
 |      :type base: str
 |      :param quote: Quote asset of symbol
 |      :type quote: str
 |      
 |      .. code:: python
 |      
 |          pair_details = client.create_isolated_margin_account(base='USDT', quote='BTC')
 |      
 |      :returns: API response
 |      
 |      .. code-block:: python
 |      
 |          {
 |              "success": true,
 |              "symbol": "BTCUSDT"
 |          }
 |      
 |      
 |      :raises: BinanceRequestException, BinanceAPIException
 |  
 |  ccrreeaattee__mmaarrggiinn__llooaann(self, **params)
 |      Apply for a loan in cross-margin or isolated-margin account.
 |      
 |      https://binance-docs.github.io/apidocs/spot/en/#margin-account-borrow-margin
 |      
 |      :param asset: name of the asset
 |      :type asset: str
 |      :param amount: amount to transfer
 |      :type amount: str
 |      :param isIsolated: set to 'TRUE' for isolated margin (default 'FALSE')
 |      :type isIsolated: str
 |      :param symbol: Isolated margin symbol (default blank for cross-margin)
 |      :type symbol: str
 |      :param recvWindow: the number of milliseconds the request is valid for
 |      :type recvWindow: int
 |      
 |      .. code:: python
 |      
 |          transaction = client.margin_create_loan(asset='BTC', amount='1.1')
 |      
 |          transaction = client.margin_create_loan(asset='BTC', amount='1.1',
 |                                                  isIsolated='TRUE', symbol='ETHBTC')
 |      
 |      :returns: API response
 |      
 |      .. code-block:: python
 |      
 |          {
 |              "tranId": 100000001
 |          }
 |      
 |      :raises: BinanceRequestException, BinanceAPIException
 |  
 |  ccrreeaattee__mmaarrggiinn__oorrddeerr(self, **params)
 |      Post a new order for margin account.
 |      
 |      https://binance-docs.github.io/apidocs/spot/en/#margin-account-new-order-trade
 |      
 |      :param symbol: required
 |      :type symbol: str
 |      :param isIsolated: set to 'TRUE' for isolated margin (default 'FALSE')
 |      :type isIsolated: str
 |      :param side: required
 |      :type side: str
 |      :param type: required
 |      :type type: str
 |      :param quantity: required
 |      :type quantity: decimal
 |      :param price: required
 |      :type price: str
 |      :param stopPrice: Used with STOP_LOSS, STOP_LOSS_LIMIT, TAKE_PROFIT, and TAKE_PROFIT_LIMIT orders.
 |      :type stopPrice: str
 |      :param timeInForce: required if limit order GTC,IOC,FOK
 |      :type timeInForce: str
 |      :param newClientOrderId: A unique id for the order. Automatically generated if not sent.
 |      :type newClientOrderId: str
 |      :param icebergQty: Used with LIMIT, STOP_LOSS_LIMIT, and TAKE_PROFIT_LIMIT to create an iceberg order.
 |      :type icebergQty: str
 |      :param newOrderRespType: Set the response JSON. ACK, RESULT, or FULL; MARKET and LIMIT order types default to
 |          FULL, all other orders default to ACK.
 |      :type newOrderRespType: str
 |      :param recvWindow: the number of milliseconds the request is valid for
 |      :type recvWindow: int
 |      
 |      :returns: API response
 |      
 |      Response ACK:
 |      
 |      .. code-block:: python
 |      
 |          {
 |              "symbol": "BTCUSDT",
 |              "orderId": 28,
 |              "clientOrderId": "6gCrw2kRUAF9CvJDGP16IP",
 |              "transactTime": 1507725176595
 |          }
 |      
 |      Response RESULT:
 |      
 |      .. code-block:: python
 |      
 |          {
 |              "symbol": "BTCUSDT",
 |              "orderId": 28,
 |              "clientOrderId": "6gCrw2kRUAF9CvJDGP16IP",
 |              "transactTime": 1507725176595,
 |              "price": "1.00000000",
 |              "origQty": "10.00000000",
 |              "executedQty": "10.00000000",
 |              "cummulativeQuoteQty": "10.00000000",
 |              "status": "FILLED",
 |              "timeInForce": "GTC",
 |              "type": "MARKET",
 |              "side": "SELL"
 |          }
 |      
 |      Response FULL:
 |      
 |      .. code-block:: python
 |      
 |          {
 |              "symbol": "BTCUSDT",
 |              "orderId": 28,
 |              "clientOrderId": "6gCrw2kRUAF9CvJDGP16IP",
 |              "transactTime": 1507725176595,
 |              "price": "1.00000000",
 |              "origQty": "10.00000000",
 |              "executedQty": "10.00000000",
 |              "cummulativeQuoteQty": "10.00000000",
 |              "status": "FILLED",
 |              "timeInForce": "GTC",
 |              "type": "MARKET",
 |              "side": "SELL",
 |              "fills": [
 |                  {
 |                      "price": "4000.00000000",
 |                      "qty": "1.00000000",
 |                      "commission": "4.00000000",
 |                      "commissionAsset": "USDT"
 |                  },
 |                  {
 |                      "price": "3999.00000000",
 |                      "qty": "5.00000000",
 |                      "commission": "19.99500000",
 |                      "commissionAsset": "USDT"
 |                  },
 |                  {
 |                      "price": "3998.00000000",
 |                      "qty": "2.00000000",
 |                      "commission": "7.99600000",
 |                      "commissionAsset": "USDT"
 |                  },
 |                  {
 |                      "price": "3997.00000000",
 |                      "qty": "1.00000000",
 |                      "commission": "3.99700000",
 |                      "commissionAsset": "USDT"
 |                  },
 |                  {
 |                      "price": "3995.00000000",
 |                      "qty": "1.00000000",
 |                      "commission": "3.99500000",
 |                      "commissionAsset": "USDT"
 |                  }
 |              ]
 |          }
 |      
 |      :raises: BinanceRequestException, BinanceAPIException, BinanceOrderException, BinanceOrderMinAmountException,
 |          BinanceOrderMinPriceException, BinanceOrderMinTotalException, BinanceOrderUnknownSymbolException,
 |          BinanceOrderInactiveSymbolException
 |  
 |  ccrreeaattee__ooccoo__oorrddeerr(self, **params)
 |      Send in a new OCO order
 |      
 |      https://github.com/binance/binance-spot-api-docs/blob/master/rest-api.md#new-oco-trade
 |      
 |      :param symbol: required
 |      :type symbol: str
 |      :param listClientOrderId: A unique id for the list order. Automatically generated if not sent.
 |      :type listClientOrderId: str
 |      :param side: required
 |      :type side: str
 |      :param quantity: required
 |      :type quantity: decimal
 |      :param limitClientOrderId: A unique id for the limit order. Automatically generated if not sent.
 |      :type limitClientOrderId: str
 |      :param price: required
 |      :type price: str
 |      :param limitIcebergQty: Used to make the LIMIT_MAKER leg an iceberg order.
 |      :type limitIcebergQty: decimal
 |      :param stopClientOrderId: A unique id for the stop order. Automatically generated if not sent.
 |      :type stopClientOrderId: str
 |      :param stopPrice: required
 |      :type stopPrice: str
 |      :param stopLimitPrice: If provided, stopLimitTimeInForce is required.
 |      :type stopLimitPrice: str
 |      :param stopIcebergQty: Used with STOP_LOSS_LIMIT leg to make an iceberg order.
 |      :type stopIcebergQty: decimal
 |      :param stopLimitTimeInForce: Valid values are GTC/FOK/IOC.
 |      :type stopLimitTimeInForce: str
 |      :param newOrderRespType: Set the response JSON. ACK, RESULT, or FULL; default: RESULT.
 |      :type newOrderRespType: str
 |      :param recvWindow: the number of milliseconds the request is valid for
 |      :type recvWindow: int
 |      
 |      :returns: API response
 |      
 |      Response ACK:
 |      
 |      .. code-block:: python
 |      
 |          {
 |          }
 |      
 |      Response RESULT:
 |      
 |      .. code-block:: python
 |      
 |          {
 |          }
 |      
 |      Response FULL:
 |      
 |      .. code-block:: python
 |      
 |          {
 |          }
 |      
 |      :raises: BinanceRequestException, BinanceAPIException, BinanceOrderException, BinanceOrderMinAmountException, BinanceOrderMinPriceException, BinanceOrderMinTotalException, BinanceOrderUnknownSymbolException, BinanceOrderInactiveSymbolException
 |  
 |  ccrreeaattee__oorrddeerr(self, **params)
 |      Send in a new order
 |      
 |      Any order with an icebergQty MUST have timeInForce set to GTC.
 |      
 |      https://github.com/binance/binance-spot-api-docs/blob/master/rest-api.md#new-order--trade
 |      
 |      :param symbol: required
 |      :type symbol: str
 |      :param side: required
 |      :type side: str
 |      :param type: required
 |      :type type: str
 |      :param timeInForce: required if limit order
 |      :type timeInForce: str
 |      :param quantity: required
 |      :type quantity: decimal
 |      :param quoteOrderQty: amount the user wants to spend (when buying) or receive (when selling)
 |          of the quote asset, applicable to MARKET orders
 |      :type quoteOrderQty: decimal
 |      :param price: required
 |      :type price: str
 |      :param newClientOrderId: A unique id for the order. Automatically generated if not sent.
 |      :type newClientOrderId: str
 |      :param icebergQty: Used with LIMIT, STOP_LOSS_LIMIT, and TAKE_PROFIT_LIMIT to create an iceberg order.
 |      :type icebergQty: decimal
 |      :param newOrderRespType: Set the response JSON. ACK, RESULT, or FULL; default: RESULT.
 |      :type newOrderRespType: str
 |      :param recvWindow: the number of milliseconds the request is valid for
 |      :type recvWindow: int
 |      
 |      :returns: API response
 |      
 |      Response ACK:
 |      
 |      .. code-block:: python
 |      
 |          {
 |              "symbol":"LTCBTC",
 |              "orderId": 1,
 |              "clientOrderId": "myOrder1" # Will be newClientOrderId
 |              "transactTime": 1499827319559
 |          }
 |      
 |      Response RESULT:
 |      
 |      .. code-block:: python
 |      
 |          {
 |              "symbol": "BTCUSDT",
 |              "orderId": 28,
 |              "clientOrderId": "6gCrw2kRUAF9CvJDGP16IP",
 |              "transactTime": 1507725176595,
 |              "price": "0.00000000",
 |              "origQty": "10.00000000",
 |              "executedQty": "10.00000000",
 |              "status": "FILLED",
 |              "timeInForce": "GTC",
 |              "type": "MARKET",
 |              "side": "SELL"
 |          }
 |      
 |      Response FULL:
 |      
 |      .. code-block:: python
 |      
 |          {
 |              "symbol": "BTCUSDT",
 |              "orderId": 28,
 |              "clientOrderId": "6gCrw2kRUAF9CvJDGP16IP",
 |              "transactTime": 1507725176595,
 |              "price": "0.00000000",
 |              "origQty": "10.00000000",
 |              "executedQty": "10.00000000",
 |              "status": "FILLED",
 |              "timeInForce": "GTC",
 |              "type": "MARKET",
 |              "side": "SELL",
 |              "fills": [
 |                  {
 |                      "price": "4000.00000000",
 |                      "qty": "1.00000000",
 |                      "commission": "4.00000000",
 |                      "commissionAsset": "USDT"
 |                  },
 |                  {
 |                      "price": "3999.00000000",
 |                      "qty": "5.00000000",
 |                      "commission": "19.99500000",
 |                      "commissionAsset": "USDT"
 |                  },
 |                  {
 |                      "price": "3998.00000000",
 |                      "qty": "2.00000000",
 |                      "commission": "7.99600000",
 |                      "commissionAsset": "USDT"
 |                  },
 |                  {
 |                      "price": "3997.00000000",
 |                      "qty": "1.00000000",
 |                      "commission": "3.99700000",
 |                      "commissionAsset": "USDT"
 |                  },
 |                  {
 |                      "price": "3995.00000000",
 |                      "qty": "1.00000000",
 |                      "commission": "3.99500000",
 |                      "commissionAsset": "USDT"
 |                  }
 |              ]
 |          }
 |      
 |      :raises: BinanceRequestException, BinanceAPIException, BinanceOrderException, BinanceOrderMinAmountException, BinanceOrderMinPriceException, BinanceOrderMinTotalException, BinanceOrderUnknownSymbolException, BinanceOrderInactiveSymbolException
 |  
 |  ccrreeaattee__ssuubb__aaccccoouunntt__ffuuttuurreess__ttrraannssffeerr(self, **params)
 |      Execute sub-account Futures transfer
 |      
 |      https://github.com/binance-exchange/binance-official-api-docs/blob/9dbe0e961b80557bb19708a707c7fad08842b28e/wapi-api.md#sub-account-transferfor-master-account
 |      
 |      :param fromEmail: required - Sender email
 |      :type fromEmail: str
 |      :param toEmail: required - Recipient email
 |      :type toEmail: str
 |      :param futuresType: required
 |      :type futuresType: int
 |      :param asset: required
 |      :type asset: str
 |      :param amount: required
 |      :type amount: decimal
 |      :param recvWindow: optional
 |      :type recvWindow: int
 |      
 |      :returns: API response
 |      
 |      .. code-block:: python
 |      
 |         {
 |              "success":true,
 |              "txnId":"2934662589"
 |          }
 |      
 |      :raises: BinanceRequestException, BinanceAPIException
 |  
 |  ccrreeaattee__tteesstt__oorrddeerr(self, **params)
 |      Test new order creation and signature/recvWindow long. Creates and validates a new order but does not send it into the matching engine.
 |      
 |      https://github.com/binance/binance-spot-api-docs/blob/master/rest-api.md#test-new-order-trade
 |      
 |      :param symbol: required
 |      :type symbol: str
 |      :param side: required
 |      :type side: str
 |      :param type: required
 |      :type type: str
 |      :param timeInForce: required if limit order
 |      :type timeInForce: str
 |      :param quantity: required
 |      :type quantity: decimal
 |      :param price: required
 |      :type price: str
 |      :param newClientOrderId: A unique id for the order. Automatically generated if not sent.
 |      :type newClientOrderId: str
 |      :param icebergQty: Used with iceberg orders
 |      :type icebergQty: decimal
 |      :param newOrderRespType: Set the response JSON. ACK, RESULT, or FULL; default: RESULT.
 |      :type newOrderRespType: str
 |      :param recvWindow: The number of milliseconds the request is valid for
 |      :type recvWindow: int
 |      
 |      :returns: API response
 |      
 |      .. code-block:: python
 |      
 |          {}
 |      
 |      :raises: BinanceRequestException, BinanceAPIException, BinanceOrderException, BinanceOrderMinAmountException, BinanceOrderMinPriceException, BinanceOrderMinTotalException, BinanceOrderUnknownSymbolException, BinanceOrderInactiveSymbolException
 |  
 |  ddiissaabbllee__ffaasstt__wwiitthhddrraaww__sswwiittcchh(self, **params)
 |      Disable Fast Withdraw Switch
 |      
 |      https://binance-docs.github.io/apidocs/spot/en/#disable-fast-withdraw-switch-user_data
 |      
 |      :param recvWindow: optional
 |      :type recvWindow: int
 |      
 |      :returns: API response
 |      
 |      :raises: BinanceRequestException, BinanceAPIException
 |  
 |  eennaabbllee__ffaasstt__wwiitthhddrraaww__sswwiittcchh(self, **params)
 |      Enable Fast Withdraw Switch
 |      
 |      https://binance-docs.github.io/apidocs/spot/en/#enable-fast-withdraw-switch-user_data
 |      
 |      :param recvWindow: optional
 |      :type recvWindow: int
 |      
 |      :returns: API response
 |      
 |      :raises: BinanceRequestException, BinanceAPIException
 |  
 |  eennaabbllee__ssuubbaaccccoouunntt__ffuuttuurreess(self, **params)
 |      Enable Futures for Sub-account (For Master Account)
 |      
 |      https://binance-docs.github.io/apidocs/spot/en/#enable-futures-for-sub-account-for-master-account
 |      
 |      :param email: required - Sub account email
 |      :type email: str
 |      :param recvWindow: optional
 |      :type recvWindow: int
 |      
 |      :returns: API response
 |      
 |      .. code-block:: python
 |      
 |          {
 |      
 |              "email":"123@test.com",
 |      
 |              "isFuturesEnabled": true  // true or false
 |      
 |          }
 |      
 |      :raises: BinanceRequestException, BinanceAPIException
 |  
 |  eennaabbllee__ssuubbaaccccoouunntt__mmaarrggiinn(self, **params)
 |      Enable Margin for Sub-account (For Master Account)
 |      
 |      https://binance-docs.github.io/apidocs/spot/en/#enable-margin-for-sub-account-for-master-account
 |      
 |      :param email: required - Sub account email
 |      :type email: str
 |      :param recvWindow: optional
 |      :type recvWindow: int
 |      
 |      :returns: API response
 |      
 |      .. code-block:: python
 |      
 |         {
 |      
 |              "email":"123@test.com",
 |      
 |              "isMarginEnabled": true
 |      
 |          }
 |      
 |      :raises: BinanceRequestException, BinanceAPIException
 |  
 |  ffuuttuurreess__aaccccoouunntt(self, **params)
 |      Get current account information.
 |      
 |      https://binance-docs.github.io/apidocs/futures/en/#account-information-user_data
 |  
 |  ffuuttuurreess__aaccccoouunntt__bbaallaannccee(self, **params)
 |      Get futures account balance
 |      
 |      https://binance-docs.github.io/apidocs/futures/en/#future-account-balance-user_data
 |  
 |  ffuuttuurreess__aaccccoouunntt__ttrraaddeess(self, **params)
 |      Get trades for the authenticated account and symbol.
 |      
 |      https://binance-docs.github.io/apidocs/futures/en/#account-trade-list-user_data
 |  
 |  ffuuttuurreess__aaccccoouunntt__ttrraannssffeerr(self, **params)
 |      Execute transfer between spot account and futures account.
 |      
 |      https://binance-docs.github.io/apidocs/futures/en/#new-future-account-transfer
 |  
 |  ffuuttuurreess__aaggggrreeggaattee__ttrraaddeess(self, **params)
 |      Get compressed, aggregate trades. Trades that fill at the time, from the same order, with the same
 |      price will have the quantity aggregated.
 |      
 |      https://binance-docs.github.io/apidocs/futures/en/#compressed-aggregate-trades-list-market_data
 |  
 |  ffuuttuurreess__ccaanncceell__aallll__ooppeenn__oorrddeerrss(self, **params)
 |      Cancel all open futures orders
 |      
 |      https://binance-docs.github.io/apidocs/futures/en/#cancel-all-open-orders-trade
 |  
 |  ffuuttuurreess__ccaanncceell__oorrddeerr(self, **params)
 |      Cancel an active futures order.
 |      
 |      https://binance-docs.github.io/apidocs/futures/en/#cancel-order-trade
 |  
 |  ffuuttuurreess__ccaanncceell__oorrddeerrss(self, **params)
 |      Cancel multiple futures orders
 |      
 |      https://binance-docs.github.io/apidocs/futures/en/#cancel-multiple-orders-trade
 |  
 |  ffuuttuurreess__cchhaannggee__lleevveerraaggee(self, **params)
 |      Change user's initial leverage of specific symbol market
 |      
 |      https://binance-docs.github.io/apidocs/futures/en/#change-initial-leverage-trade
 |  
 |  ffuuttuurreess__cchhaannggee__mmaarrggiinn__ttyyppee(self, **params)
 |      Change the margin type for a symbol
 |      
 |      https://binance-docs.github.io/apidocs/futures/en/#change-margin-type-trade
 |  
 |  ffuuttuurreess__cchhaannggee__mmuullttii__aasssseettss__mmooddee(self, multiAssetsMargin: bool)
 |      Change user's Multi-Assets mode (Multi-Assets Mode or Single-Asset Mode) on Every symbol
 |      
 |      https://binance-docs.github.io/apidocs/futures/en/#change-multi-assets-mode-trade
 |  
 |  ffuuttuurreess__cchhaannggee__ppoossiittiioonn__mmaarrggiinn(self, **params)
 |      Change the position margin for a symbol
 |      
 |      https://binance-docs.github.io/apidocs/futures/en/#modify-isolated-position-margin-trade
 |  
 |  ffuuttuurreess__cchhaannggee__ppoossiittiioonn__mmooddee(self, **params)
 |      Change position mode for authenticated account
 |      
 |      https://binance-docs.github.io/apidocs/futures/en/#change-position-mode-trade
 |  
 |  ffuuttuurreess__ccooiinn__aaccccoouunntt(self, **params)
 |      Get current account information.
 |      
 |      https://binance-docs.github.io/apidocs/delivery/en/#account-information-user_data
 |  
 |  ffuuttuurreess__ccooiinn__aaccccoouunntt__bbaallaannccee(self, **params)
 |      Get futures account balance
 |      
 |      https://binance-docs.github.io/apidocs/delivery/en/#futures-account-balance-user_data
 |  
 |  ffuuttuurreess__ccooiinn__aaccccoouunntt__ttrraaddeess(self, **params)
 |      Get trades for the authenticated account and symbol.
 |      
 |      https://binance-docs.github.io/apidocs/delivery/en/#account-trade-list-user_data
 |  
 |  ffuuttuurreess__ccooiinn__aaggggrreeggaattee__ttrraaddeess(self, **params)
 |      Get compressed, aggregate trades. Trades that fill at the time, from the same order, with the same
 |      price will have the quantity aggregated.
 |      
 |      https://binance-docs.github.io/apidocs/delivery/en/#compressed-aggregate-trades-list
 |  
 |  ffuuttuurreess__ccooiinn__ccaanncceell__aallll__ooppeenn__oorrddeerrss(self, **params)
 |      Cancel all open futures orders
 |      
 |      https://binance-docs.github.io/apidocs/delivery/en/#cancel-all-open-orders-trade
 |  
 |  ffuuttuurreess__ccooiinn__ccaanncceell__oorrddeerr(self, **params)
 |      Cancel an active futures order.
 |      
 |      https://binance-docs.github.io/apidocs/delivery/en/#cancel-order-trade
 |  
 |  ffuuttuurreess__ccooiinn__ccaanncceell__oorrddeerrss(self, **params)
 |      Cancel multiple futures orders
 |      
 |      https://binance-docs.github.io/apidocs/delivery/en/#cancel-multiple-orders-trade
 |  
 |  ffuuttuurreess__ccooiinn__cchhaannggee__lleevveerraaggee(self, **params)
 |      Change user's initial leverage of specific symbol market
 |      
 |      https://binance-docs.github.io/apidocs/delivery/en/#change-initial-leverage-trade
 |  
 |  ffuuttuurreess__ccooiinn__cchhaannggee__mmaarrggiinn__ttyyppee(self, **params)
 |      Change the margin type for a symbol
 |      
 |      https://binance-docs.github.io/apidocs/delivery/en/#change-margin-type-trade
 |  
 |  ffuuttuurreess__ccooiinn__cchhaannggee__ppoossiittiioonn__mmaarrggiinn(self, **params)
 |      Change the position margin for a symbol
 |      
 |      https://binance-docs.github.io/apidocs/delivery/en/#modify-isolated-position-margin-trade
 |  
 |  ffuuttuurreess__ccooiinn__cchhaannggee__ppoossiittiioonn__mmooddee(self, **params)
 |      Change user's position mode (Hedge Mode or One-way Mode ) on EVERY symbol
 |      
 |      https://binance-docs.github.io/apidocs/delivery/en/#change-position-mode-trade
 |  
 |  ffuuttuurreess__ccooiinn__ccoonnttiinnoouuss__kklliinneess(self, **params)
 |      Kline/candlestick bars for a specific contract type. Klines are uniquely identified by their open time.
 |      
 |      https://binance-docs.github.io/apidocs/delivery/en/#continuous-contract-kline-candlestick-data
 |  
 |  ffuuttuurreess__ccooiinn__ccrreeaattee__oorrddeerr(self, **params)
 |      Send in a new order.
 |      
 |      https://binance-docs.github.io/apidocs/delivery/en/#new-order-trade
 |  
 |  ffuuttuurreess__ccooiinn__eexxcchhaannggee__iinnffoo(self)
 |      Current exchange trading rules and symbol information
 |      
 |      https://binance-docs.github.io/apidocs/delivery/en/#exchange-information
 |  
 |  ffuuttuurreess__ccooiinn__ffuunnddiinngg__rraattee(self, **params)
 |      Get funding rate history
 |      
 |      https://binance-docs.github.io/apidocs/delivery/en/#get-funding-rate-history-of-perpetual-futures
 |  
 |  ffuuttuurreess__ccooiinn__ggeett__aallll__oorrddeerrss(self, **params)
 |      Get all futures account orders; active, canceled, or filled.
 |      
 |      https://binance-docs.github.io/apidocs/delivery/en/#all-orders-user_data
 |  
 |  ffuuttuurreess__ccooiinn__ggeett__ooppeenn__oorrddeerrss(self, **params)
 |      Get all open orders on a symbol.
 |      
 |      https://binance-docs.github.io/apidocs/delivery/en/#current-all-open-orders-user_data
 |  
 |  ffuuttuurreess__ccooiinn__ggeett__oorrddeerr(self, **params)
 |      Check an order's status.
 |      
 |      https://binance-docs.github.io/apidocs/delivery/en/#query-order-user_data
 |  
 |  ffuuttuurreess__ccooiinn__ggeett__ppoossiittiioonn__mmooddee(self, **params)
 |      Get user's position mode (Hedge Mode or One-way Mode ) on EVERY symbol
 |      
 |      https://binance-docs.github.io/apidocs/delivery/en/#get-current-position-mode-user_data
 |  
 |  ffuuttuurreess__ccooiinn__hhiissttoorriiccaall__ttrraaddeess(self, **params)
 |      Get older market historical trades.
 |      
 |      https://binance-docs.github.io/apidocs/delivery/en/#old-trades-lookup-market_data
 |  
 |  ffuuttuurreess__ccooiinn__iinnccoommee__hhiissttoorryy(self, **params)
 |      Get income history for authenticated account
 |      
 |      https://binance-docs.github.io/apidocs/delivery/en/#get-income-history-user_data
 |  
 |  ffuuttuurreess__ccooiinn__iinnddeexx__pprriiccee__kklliinneess(self, **params)
 |      Kline/candlestick bars for the index price of a pair..
 |      
 |      https://binance-docs.github.io/apidocs/delivery/en/#index-price-kline-candlestick-data
 |  
 |  ffuuttuurreess__ccooiinn__kklliinneess(self, **params)
 |      Kline/candlestick bars for a symbol. Klines are uniquely identified by their open time.
 |      
 |      https://binance-docs.github.io/apidocs/delivery/en/#kline-candlestick-data
 |  
 |  ffuuttuurreess__ccooiinn__lleevveerraaggee__bbrraacckkeett(self, **params)
 |      Notional and Leverage Brackets
 |      
 |      https://binance-docs.github.io/apidocs/delivery/en/#notional-bracket-for-pair-user_data
 |  
 |  ffuuttuurreess__ccooiinn__lliiqquuiiddaattiioonn__oorrddeerrss(self, **params)
 |      Get all liquidation orders
 |      
 |      https://binance-docs.github.io/apidocs/delivery/en/#get-all-liquidation-orders
 |  
 |  ffuuttuurreess__ccooiinn__mmaarrkk__pprriiccee(self, **params)
 |      Get Mark Price and Funding Rate
 |      
 |      https://binance-docs.github.io/apidocs/delivery/en/#index-price-and-mark-price
 |  
 |  ffuuttuurreess__ccooiinn__mmaarrkk__pprriiccee__kklliinneess(self, **params)
 |      Kline/candlestick bars for the index price of a pair..
 |      
 |      https://binance-docs.github.io/apidocs/delivery/en/#mark-price-kline-candlestick-data
 |  
 |  ffuuttuurreess__ccooiinn__ooppeenn__iinntteerreesstt(self, **params)
 |      Get present open interest of a specific symbol.
 |      
 |      https://binance-docs.github.io/apidocs/delivery/en/#open-interest
 |  
 |  ffuuttuurreess__ccooiinn__ooppeenn__iinntteerreesstt__hhiisstt(self, **params)
 |      Get open interest statistics of a specific symbol.
 |      
 |      https://binance-docs.github.io/apidocs/delivery/en/#open-interest-statistics-market-data
 |  
 |  ffuuttuurreess__ccooiinn__oorrddeerr__bbooookk(self, **params)
 |      Get the Order Book for the market
 |      
 |      https://binance-docs.github.io/apidocs/delivery/en/#order-book
 |  
 |  ffuuttuurreess__ccooiinn__oorrddeerrbbooookk__ttiicckkeerr(self, **params)
 |      Best price/qty on the order book for a symbol or symbols.
 |      
 |      https://binance-docs.github.io/apidocs/delivery/en/#symbol-order-book-ticker
 |  
 |  ffuuttuurreess__ccooiinn__ppiinngg(self)
 |      Test connectivity to the Rest API
 |      
 |      https://binance-docs.github.io/apidocs/delivery/en/#test-connectivity
 |  
 |  ffuuttuurreess__ccooiinn__ppoossiittiioonn__iinnffoorrmmaattiioonn(self, **params)
 |      Get position information
 |      
 |      https://binance-docs.github.io/apidocs/delivery/en/#position-information-user_data
 |  
 |  ffuuttuurreess__ccooiinn__ppoossiittiioonn__mmaarrggiinn__hhiissttoorryy(self, **params)
 |      Get position margin change history
 |      
 |      https://binance-docs.github.io/apidocs/delivery/en/#get-position-margin-change-history-trade
 |  
 |  ffuuttuurreess__ccooiinn__rreecceenntt__ttrraaddeess(self, **params)
 |      Get recent trades (up to last 500).
 |      
 |      https://binance-docs.github.io/apidocs/delivery/en/#recent-trades-list
 |  
 |  ffuuttuurreess__ccooiinn__ssttrreeaamm__cclloossee(self, listenKey)
 |  
 |  ffuuttuurreess__ccooiinn__ssttrreeaamm__ggeett__lliisstteenn__kkeeyy(self)
 |  
 |  ffuuttuurreess__ccooiinn__ssttrreeaamm__kkeeeeppaalliivvee(self, listenKey)
 |  
 |  ffuuttuurreess__ccooiinn__ssyymmbbooll__ttiicckkeerr(self, **params)
 |      Latest price for a symbol or symbols.
 |      
 |      https://binance-docs.github.io/apidocs/delivery/en/#symbol-price-ticker
 |  
 |  ffuuttuurreess__ccooiinn__ttiicckkeerr(self, **params)
 |      24 hour rolling window price change statistics.
 |      
 |      https://binance-docs.github.io/apidocs/delivery/en/#24hr-ticker-price-change-statistics
 |  
 |  ffuuttuurreess__ccooiinn__ttiimmee(self)
 |      Test connectivity to the Rest API and get the current server time.
 |      
 |      https://binance-docs.github.io/apidocs/delivery/en/#check-server-time
 |  
 |  ffuuttuurreess__ccoonnttiinnoouuss__kklliinneess(self, **params)
 |      Kline/candlestick bars for a specific contract type. Klines are uniquely identified by their open time.
 |      
 |      https://binance-docs.github.io/apidocs/futures/en/#continuous-contract-kline-candlestick-data
 |  
 |  ffuuttuurreess__ccrreeaattee__oorrddeerr(self, **params)
 |      Send in a new order.
 |      
 |      https://binance-docs.github.io/apidocs/futures/en/#new-order-trade
 |  
 |  ffuuttuurreess__eexxcchhaannggee__iinnffoo(self)
 |      Current exchange trading rules and symbol information
 |      
 |      https://binance-docs.github.io/apidocs/futures/en/#exchange-information-market_data
 |  
 |  ffuuttuurreess__ffuunnddiinngg__rraattee(self, **params)
 |      Get funding rate history
 |      
 |      https://binance-docs.github.io/apidocs/futures/en/#get-funding-rate-history-market_data
 |  
 |  ffuuttuurreess__ggeett__aallll__oorrddeerrss(self, **params)
 |      Get all futures account orders; active, canceled, or filled.
 |      
 |      https://binance-docs.github.io/apidocs/futures/en/#all-orders-user_data
 |  
 |  ffuuttuurreess__ggeett__mmuullttii__aasssseettss__mmooddee(self)
 |      Get user's Multi-Assets mode (Multi-Assets Mode or Single-Asset Mode) on Every symbol
 |      
 |      https://binance-docs.github.io/apidocs/futures/en/#get-current-multi-assets-mode-user_data
 |  
 |  ffuuttuurreess__ggeett__ooppeenn__oorrddeerrss(self, **params)
 |      Get all open orders on a symbol.
 |      
 |      https://binance-docs.github.io/apidocs/futures/en/#current-open-orders-user_data
 |  
 |  ffuuttuurreess__ggeett__oorrddeerr(self, **params)
 |      Check an order's status.
 |      
 |      https://binance-docs.github.io/apidocs/futures/en/#query-order-user_data
 |  
 |  ffuuttuurreess__ggeett__ppoossiittiioonn__mmooddee(self, **params)
 |      Get position mode for authenticated account
 |      
 |      https://binance-docs.github.io/apidocs/futures/en/#get-current-position-mode-user_data
 |  
 |  ffuuttuurreess__hhiissttoorriiccaall__kklliinneess(self, symbol, interval, start_str, end_str=None, limit=500)
 |      Get historical futures klines from Binance
 |      
 |      :param symbol: Name of symbol pair e.g BNBBTC
 |      :type symbol: str
 |      :param interval: Binance Kline interval
 |      :type interval: str
 |      :param start_str: Start date string in UTC format or timestamp in milliseconds
 |      :type start_str: str|int
 |      :param end_str: optional - end date string in UTC format or timestamp in milliseconds (default will fetch everything up to now)
 |      :type end_str: str|int
 |      :param limit: Default 500; max 1000.
 |      :type limit: int
 |      
 |      :return: list of OHLCV values
 |  
 |  ffuuttuurreess__hhiissttoorriiccaall__kklliinneess__ggeenneerraattoorr(self, symbol, interval, start_str, end_str=None)
 |      Get historical futures klines generator from Binance
 |      
 |      :param symbol: Name of symbol pair e.g BNBBTC
 |      :type symbol: str
 |      :param interval: Binance Kline interval
 |      :type interval: str
 |      :param start_str: Start date string in UTC format or timestamp in milliseconds
 |      :type start_str: str|int
 |      :param end_str: optional - end date string in UTC format or timestamp in milliseconds (default will fetch everything up to now)
 |      :type end_str: str|int
 |      
 |      :return: generator of OHLCV values
 |  
 |  ffuuttuurreess__hhiissttoorriiccaall__ttrraaddeess(self, **params)
 |      Get older market historical trades.
 |      
 |      https://binance-docs.github.io/apidocs/futures/en/#old-trades-lookup-market_data
 |  
 |  ffuuttuurreess__iinnccoommee__hhiissttoorryy(self, **params)
 |      Get income history for authenticated account
 |      
 |      https://binance-docs.github.io/apidocs/futures/en/#get-income-history-user_data
 |  
 |  ffuuttuurreess__kklliinneess(self, **params)
 |      Kline/candlestick bars for a symbol. Klines are uniquely identified by their open time.
 |      
 |      https://binance-docs.github.io/apidocs/futures/en/#kline-candlestick-data-market_data
 |  
 |  ffuuttuurreess__lleevveerraaggee__bbrraacckkeett(self, **params)
 |      Notional and Leverage Brackets
 |      
 |      https://binance-docs.github.io/apidocs/futures/en/#notional-and-leverage-brackets-market_data
 |  
 |  ffuuttuurreess__lliiqquuiiddaattiioonn__oorrddeerrss(self, **params)
 |      Get all liquidation orders
 |      
 |      https://binance-docs.github.io/apidocs/futures/en/#get-all-liquidation-orders-market_data
 |  
 |  ffuuttuurreess__mmaarrkk__pprriiccee(self, **params)
 |      Get Mark Price and Funding Rate
 |      
 |      https://binance-docs.github.io/apidocs/futures/en/#mark-price-market_data
 |  
 |  ffuuttuurreess__ooppeenn__iinntteerreesstt(self, **params)
 |      Get present open interest of a specific symbol.
 |      
 |      https://binance-docs.github.io/apidocs/futures/en/#open-interest-market_data
 |  
 |  ffuuttuurreess__ooppeenn__iinntteerreesstt__hhiisstt(self, **params)
 |      Get open interest statistics of a specific symbol.
 |      
 |      https://binance-docs.github.io/apidocs/futures/en/#open-interest-statistics
 |  
 |  ffuuttuurreess__oorrddeerr__bbooookk(self, **params)
 |      Get the Order Book for the market
 |      
 |      https://binance-docs.github.io/apidocs/futures/en/#order-book-market_data
 |  
 |  ffuuttuurreess__oorrddeerrbbooookk__ttiicckkeerr(self, **params)
 |      Best price/qty on the order book for a symbol or symbols.
 |      
 |      https://binance-docs.github.io/apidocs/futures/en/#symbol-order-book-ticker-market_data
 |  
 |  ffuuttuurreess__ppiinngg(self)
 |      Test connectivity to the Rest API
 |      
 |      https://binance-docs.github.io/apidocs/futures/en/#test-connectivity
 |  
 |  ffuuttuurreess__ppllaaccee__bbaattcchh__oorrddeerr(self, **params)
 |      Send in new orders.
 |      
 |      https://binance-docs.github.io/apidocs/futures/en/#place-multiple-orders-trade
 |      
 |      To avoid modifying the existing signature generation and parameter order logic,
 |      the url encoding is done on the special query param, batchOrders, in the early stage.
 |  
 |  ffuuttuurreess__ppoossiittiioonn__iinnffoorrmmaattiioonn(self, **params)
 |      Get position information
 |      
 |      https://binance-docs.github.io/apidocs/futures/en/#position-information-user_data
 |  
 |  ffuuttuurreess__ppoossiittiioonn__mmaarrggiinn__hhiissttoorryy(self, **params)
 |      Get position margin change history
 |      
 |      https://binance-docs.github.io/apidocs/futures/en/#get-postion-margin-change-history-trade
 |  
 |  ffuuttuurreess__rreecceenntt__ttrraaddeess(self, **params)
 |      Get recent trades (up to last 500).
 |      
 |      https://binance-docs.github.io/apidocs/futures/en/#recent-trades-list-market_data
 |  
 |  ffuuttuurreess__ssttrreeaamm__cclloossee(self, listenKey)
 |  
 |  ffuuttuurreess__ssttrreeaamm__ggeett__lliisstteenn__kkeeyy(self)
 |  
 |  ffuuttuurreess__ssttrreeaamm__kkeeeeppaalliivvee(self, listenKey)
 |  
 |  ffuuttuurreess__ssyymmbbooll__ttiicckkeerr(self, **params)
 |      Latest price for a symbol or symbols.
 |      
 |      https://binance-docs.github.io/apidocs/futures/en/#symbol-price-ticker-market_data
 |  
 |  ffuuttuurreess__ttiicckkeerr(self, **params)
 |      24 hour rolling window price change statistics.
 |      
 |      https://binance-docs.github.io/apidocs/futures/en/#24hr-ticker-price-change-statistics-market_data
 |  
 |  ffuuttuurreess__ttiimmee(self)
 |      Test connectivity to the Rest API and get the current server time.
 |      
 |      https://binance-docs.github.io/apidocs/futures/en/#check-server-time
 |  
 |  ggeett__aaccccoouunntt(self, **params)
 |      Get current account information.
 |      
 |      https://github.com/binance/binance-spot-api-docs/blob/master/rest-api.md#account-information-user_data
 |      
 |      :param recvWindow: the number of milliseconds the request is valid for
 |      :type recvWindow: int
 |      
 |      :returns: API response
 |      
 |      .. code-block:: python
 |      
 |          {
 |              "makerCommission": 15,
 |              "takerCommission": 15,
 |              "buyerCommission": 0,
 |              "sellerCommission": 0,
 |              "canTrade": true,
 |              "canWithdraw": true,
 |              "canDeposit": true,
 |              "balances": [
 |                  {
 |                      "asset": "BTC",
 |                      "free": "4723846.89208129",
 |                      "locked": "0.00000000"
 |                  },
 |                  {
 |                      "asset": "LTC",
 |                      "free": "4763368.68006011",
 |                      "locked": "0.00000000"
 |                  }
 |              ]
 |          }
 |      
 |      :raises: BinanceRequestException, BinanceAPIException
 |  
 |  ggeett__aaccccoouunntt__aappii__ttrraaddiinngg__ssttaattuuss(self, **params)
 |      Fetch account api trading status detail.
 |      
 |      https://binance-docs.github.io/apidocs/spot/en/#account-api-trading-status-sapi-user_data
 |      
 |      :param recvWindow: the number of milliseconds the request is valid for
 |      :type recvWindow: int
 |      
 |      :returns: API response
 |      
 |      .. code-block:: python
 |      
 |          {
 |              "data": {          // API trading status detail
 |                  "isLocked": false,   // API trading function is locked or not
 |                  "plannedRecoverTime": 0,  // If API trading function is locked, this is the planned recover time
 |                  "triggerCondition": {
 |                          "GCR": 150,  // Number of GTC orders
 |                          "IFER": 150, // Number of FOK/IOC orders
 |                          "UFR": 300   // Number of orders
 |                  },
 |                  "indicators": {  // The indicators updated every 30 seconds
 |                       "BTCUSDT": [  // The symbol
 |                          {
 |                              "i": "UFR",  // Unfilled Ratio (UFR)
 |                              "c": 20,     // Count of all orders
 |                              "v": 0.05,   // Current UFR value
 |                              "t": 0.995   // Trigger UFR value
 |                          },
 |                          {
 |                              "i": "IFER", // IOC/FOK Expiration Ratio (IFER)
 |                              "c": 20,     // Count of FOK/IOC orders
 |                              "v": 0.99,   // Current IFER value
 |                              "t": 0.99    // Trigger IFER value
 |                          },
 |                          {
 |                              "i": "GCR",  // GTC Cancellation Ratio (GCR)
 |                              "c": 20,     // Count of GTC orders
 |                              "v": 0.99,   // Current GCR value
 |                              "t": 0.99    // Trigger GCR value
 |                          }
 |                      ],
 |                      "ETHUSDT": [
 |                          {
 |                              "i": "UFR",
 |                              "c": 20,
 |                              "v": 0.05,
 |                              "t": 0.995
 |                          },
 |                          {
 |                              "i": "IFER",
 |                              "c": 20,
 |                              "v": 0.99,
 |                              "t": 0.99
 |                          },
 |                          {
 |                              "i": "GCR",
 |                              "c": 20,
 |                              "v": 0.99,
 |                              "t": 0.99
 |                          }
 |                      ]
 |                  },
 |                  "updateTime": 1547630471725
 |              }
 |          }
 |      
 |      :raises: BinanceWithdrawException
 |  
 |  ggeett__aaccccoouunntt__ssnnaappsshhoott(self, **params)
 |      Get daily account snapshot of specific type.
 |      
 |      https://binance-docs.github.io/apidocs/spot/en/#daily-account-snapshot-user_data
 |      
 |      :param type: required. Valid values are SPOT/MARGIN/FUTURES.
 |      :type type: string
 |      :param startTime: optional
 |      :type startTime: int
 |      :param endTime: optional
 |      :type endTime: int
 |      :param limit: optional
 |      :type limit: int
 |      :param recvWindow: optional
 |      :type recvWindow: int
 |      
 |      :returns: API response
 |      
 |      .. code-block:: python
 |      
 |          {
 |             "code":200, // 200 for success; others are error codes
 |             "msg":"", // error message
 |             "snapshotVos":[
 |                {
 |                   "data":{
 |                      "balances":[
 |                         {
 |                            "asset":"BTC",
 |                            "free":"0.09905021",
 |                            "locked":"0.00000000"
 |                         },
 |                         {
 |                            "asset":"USDT",
 |                            "free":"1.89109409",
 |                            "locked":"0.00000000"
 |                         }
 |                      ],
 |                      "totalAssetOfBtc":"0.09942700"
 |                   },
 |                   "type":"spot",
 |                   "updateTime":1576281599000
 |                }
 |             ]
 |          }
 |      
 |      OR
 |      
 |      .. code-block:: python
 |      
 |          {
 |             "code":200, // 200 for success; others are error codes
 |             "msg":"", // error message
 |             "snapshotVos":[
 |                {
 |                   "data":{
 |                      "marginLevel":"2748.02909813",
 |                      "totalAssetOfBtc":"0.00274803",
 |                      "totalLiabilityOfBtc":"0.00000100",
 |                      "totalNetAssetOfBtc":"0.00274750",
 |                      "userAssets":[
 |                         {
 |                            "asset":"XRP",
 |                            "borrowed":"0.00000000",
 |                            "free":"1.00000000",
 |                            "interest":"0.00000000",
 |                            "locked":"0.00000000",
 |                            "netAsset":"1.00000000"
 |                         }
 |                      ]
 |                   },
 |                   "type":"margin",
 |                   "updateTime":1576281599000
 |                }
 |             ]
 |          }
 |      
 |      OR
 |      
 |      .. code-block:: python
 |      
 |          {
 |             "code":200, // 200 for success; others are error codes
 |             "msg":"", // error message
 |             "snapshotVos":[
 |                {
 |                   "data":{
 |                      "assets":[
 |                         {
 |                            "asset":"USDT",
 |                            "marginBalance":"118.99782335",
 |                            "walletBalance":"120.23811389"
 |                         }
 |                      ],
 |                      "position":[
 |                         {
 |                            "entryPrice":"7130.41000000",
 |                            "markPrice":"7257.66239673",
 |                            "positionAmt":"0.01000000",
 |                            "symbol":"BTCUSDT",
 |                            "unRealizedProfit":"1.24029054"
 |                         }
 |                      ]
 |                   },
 |                   "type":"futures",
 |                   "updateTime":1576281599000
 |                }
 |             ]
 |          }
 |      
 |      :raises: BinanceRequestException, BinanceAPIException
 |  
 |  ggeett__aaccccoouunntt__ssttaattuuss(self, **params)
 |      Get account status detail.
 |      
 |      https://binance-docs.github.io/apidocs/spot/en/#account-status-sapi-user_data
 |      
 |      :param recvWindow: the number of milliseconds the request is valid for
 |      :type recvWindow: int
 |      
 |      :returns: API response
 |      
 |      .. code-block:: python
 |      
 |          {
 |              "data": "Normal"
 |          }
 |      
 |      :raises: BinanceWithdrawException
 |  
 |  ggeett__aaggggrreeggaattee__ttrraaddeess(self, **params) -> Dict
 |      Get compressed, aggregate trades. Trades that fill at the time,
 |      from the same order, with the same price will have the quantity aggregated.
 |      
 |      https://github.com/binance/binance-spot-api-docs/blob/master/rest-api.md#compressedaggregate-trades-list
 |      
 |      :param symbol: required
 |      :type symbol: str
 |      :param fromId:  ID to get aggregate trades from INCLUSIVE.
 |      :type fromId: str
 |      :param startTime: Timestamp in ms to get aggregate trades from INCLUSIVE.
 |      :type startTime: int
 |      :param endTime: Timestamp in ms to get aggregate trades until INCLUSIVE.
 |      :type endTime: int
 |      :param limit:  Default 500; max 500.
 |      :type limit: int
 |      
 |      :returns: API response
 |      
 |      .. code-block:: python
 |      
 |          [
 |              {
 |                  "a": 26129,         # Aggregate tradeId
 |                  "p": "0.01633102",  # Price
 |                  "q": "4.70443515",  # Quantity
 |                  "f": 27781,         # First tradeId
 |                  "l": 27781,         # Last tradeId
 |                  "T": 1498793709153, # Timestamp
 |                  "m": true,          # Was the buyer the maker?
 |                  "M": true           # Was the trade the best price match?
 |              }
 |          ]
 |      
 |      :raises: BinanceRequestException, BinanceAPIException
 |  
 |  ggeett__aallll__ccooiinnss__iinnffoo(self, **params)
 |      Get information of coins (available for deposit and withdraw) for user.
 |      
 |      https://binance-docs.github.io/apidocs/spot/en/#all-coins-39-information-user_data
 |      
 |      :param recvWindow: optional
 |      :type recvWindow: int
 |      
 |      :returns: API response
 |      
 |      .. code-block:: python
 |      
 |          {
 |              "coin": "BTC",
 |              "depositAllEnable": true,
 |              "withdrawAllEnable": true,
 |              "name": "Bitcoin",
 |              "free": "0",
 |              "locked": "0",
 |              "freeze": "0",
 |              "withdrawing": "0",
 |              "ipoing": "0",
 |              "ipoable": "0",
 |              "storage": "0",
 |              "isLegalMoney": false,
 |              "trading": true,
 |              "networkList": [
 |                  {
 |                      "network": "BNB",
 |                      "coin": "BTC",
 |                      "withdrawIntegerMultiple": "0.00000001",
 |                      "isDefault": false,
 |                      "depositEnable": true,
 |                      "withdrawEnable": true,
 |                      "depositDesc": "",
 |                      "withdrawDesc": "",
 |                      "specialTips": "Both a MEMO and an Address are required to successfully deposit your BEP2-BTCB tokens to Binance.",
 |                      "name": "BEP2",
 |                      "resetAddressStatus": false,
 |                      "addressRegex": "^(bnb1)[0-9a-z]{38}$",
 |                      "memoRegex": "^[0-9A-Za-z-_]{1,120}$",
 |                      "withdrawFee": "0.0000026",
 |                      "withdrawMin": "0.0000052",
 |                      "withdrawMax": "0",
 |                      "minConfirm": 1,
 |                      "unLockConfirm": 0
 |                  },
 |                  {
 |                      "network": "BTC",
 |                      "coin": "BTC",
 |                      "withdrawIntegerMultiple": "0.00000001",
 |                      "isDefault": true,
 |                      "depositEnable": true,
 |                      "withdrawEnable": true,
 |                      "depositDesc": "",
 |                      "withdrawDesc": "",
 |                      "specialTips": "",
 |                      "name": "BTC",
 |                      "resetAddressStatus": false,
 |                      "addressRegex": "^[13][a-km-zA-HJ-NP-Z1-9]{25,34}$|^(bc1)[0-9A-Za-z]{39,59}$",
 |                      "memoRegex": "",
 |                      "withdrawFee": "0.0005",
 |                      "withdrawMin": "0.001",
 |                      "withdrawMax": "0",
 |                      "minConfirm": 1,
 |                      "unLockConfirm": 2
 |                  }
 |              ]
 |          }
 |      
 |      :raises: BinanceRequestException, BinanceAPIException
 |  
 |  ggeett__aallll__iissoollaatteedd__mmaarrggiinn__ssyymmbboollss(self, **params)
 |      Query isolated margin symbol info for all pairs
 |      
 |      https://binance-docs.github.io/apidocs/spot/en/#get-all-isolated-margin-symbol-user_data
 |      
 |      .. code:: python
 |      
 |          pair_details = client.get_all_isolated_margin_symbols()
 |      
 |      :returns: API response
 |      
 |      .. code-block:: python
 |      
 |          [
 |              {
 |                  "base": "BNB",
 |                  "isBuyAllowed": true,
 |                  "isMarginTrade": true,
 |                  "isSellAllowed": true,
 |                  "quote": "BTC",
 |                  "symbol": "BNBBTC"
 |              },
 |              {
 |                  "base": "TRX",
 |                  "isBuyAllowed": true,
 |                  "isMarginTrade": true,
 |                  "isSellAllowed": true,
 |                  "quote": "BTC",
 |                  "symbol": "TRXBTC"
 |              }
 |          ]
 |      
 |      
 |      :raises: BinanceRequestException, BinanceAPIException
 |  
 |  ggeett__aallll__mmaarrggiinn__oorrddeerrss(self, **params)
 |      Query all margin accounts orders
 |      
 |      If orderId is set, it will get orders >= that orderId. Otherwise most recent orders are returned.
 |      
 |      For some historical orders cummulativeQuoteQty will be < 0, meaning the data is not available at this time.
 |      
 |      https://binance-docs.github.io/apidocs/spot/en/#query-margin-account-39-s-all-order-user_data
 |      
 |      :param symbol: required
 |      :type symbol: str
 |      :param isIsolated: set to 'TRUE' for isolated margin (default 'FALSE')
 |      :type isIsolated: str
 |      :param orderId: optional
 |      :type orderId: str
 |      :param startTime: optional
 |      :type startTime: str
 |      :param endTime: optional
 |      :type endTime: str
 |      :param limit: Default 500; max 1000
 |      :type limit: int
 |      :param recvWindow: the number of milliseconds the request is valid for
 |      :type recvWindow: int
 |      
 |      :returns: API response
 |      
 |          [
 |              {
 |                  "id": 43123876,
 |                  "price": "0.00395740",
 |                  "qty": "4.06000000",
 |                  "quoteQty": "0.01606704",
 |                  "symbol": "BNBBTC",
 |                  "time": 1556089977693
 |              },
 |              {
 |                  "id": 43123877,
 |                  "price": "0.00395740",
 |                  "qty": "0.77000000",
 |                  "quoteQty": "0.00304719",
 |                  "symbol": "BNBBTC",
 |                  "time": 1556089977693
 |              },
 |              {
 |                  "id": 43253549,
 |                  "price": "0.00428930",
 |                  "qty": "23.30000000",
 |                  "quoteQty": "0.09994069",
 |                  "symbol": "BNBBTC",
 |                  "time": 1556163963504
 |              }
 |          ]
 |      
 |      
 |      :raises: BinanceRequestException, BinanceAPIException
 |  
 |  ggeett__aallll__oorrddeerrss(self, **params)
 |      Get all account orders; active, canceled, or filled.
 |      
 |      https://github.com/binance/binance-spot-api-docs/blob/master/rest-api.md#all-orders-user_data
 |      
 |      :param symbol: required
 |      :type symbol: str
 |      :param orderId: The unique order id
 |      :type orderId: int
 |      :param limit: Default 500; max 500.
 |      :type limit: int
 |      :param recvWindow: the number of milliseconds the request is valid for
 |      :type recvWindow: int
 |      
 |      :returns: API response
 |      
 |      .. code-block:: python
 |      
 |          [
 |              {
 |                  "symbol": "LTCBTC",
 |                  "orderId": 1,
 |                  "clientOrderId": "myOrder1",
 |                  "price": "0.1",
 |                  "origQty": "1.0",
 |                  "executedQty": "0.0",
 |                  "status": "NEW",
 |                  "timeInForce": "GTC",
 |                  "type": "LIMIT",
 |                  "side": "BUY",
 |                  "stopPrice": "0.0",
 |                  "icebergQty": "0.0",
 |                  "time": 1499827319559
 |              }
 |          ]
 |      
 |      :raises: BinanceRequestException, BinanceAPIException
 |  
 |  ggeett__aallll__ttiicckkeerrss(self, symbol: Union[str, NoneType] = None) -> Dict
 |      Latest price for a symbol or symbols.
 |      
 |      https://binance-docs.github.io/apidocs/spot/en/#symbol-price-ticker
 |      
 |      :param symbol: optional
 |      :type symbol: str
 |      
 |      :returns: List of market tickers
 |      
 |      .. code-block:: python
 |      
 |          [
 |              {
 |                  "symbol": "LTCBTC",
 |                  "price": "4.00000200"
 |              },
 |              {
 |                  "symbol": "ETHBTC",
 |                  "price": "0.07946600"
 |              }
 |          ]
 |      
 |      :raises: BinanceRequestException, BinanceAPIException
 |  
 |  ggeett__aasssseett__bbaallaannccee(self, asset, **params)
 |      Get current asset balance.
 |      
 |      https://github.com/binance/binance-spot-api-docs/blob/master/rest-api.md#account-information-user_data
 |      
 |      :param asset: required
 |      :type asset: str
 |      :param recvWindow: the number of milliseconds the request is valid for
 |      :type recvWindow: int
 |      
 |      :returns: dictionary or None if not found
 |      
 |      .. code-block:: python
 |      
 |          {
 |              "asset": "BTC",
 |              "free": "4723846.89208129",
 |              "locked": "0.00000000"
 |          }
 |      
 |      :raises: BinanceRequestException, BinanceAPIException
 |  
 |  ggeett__aasssseett__ddeettaaiillss(self, **params)
 |      Fetch details on assets.
 |      
 |      https://binance-docs.github.io/apidocs/spot/en/#asset-detail-sapi-user_data
 |      
 |      :param asset: optional
 |      :type asset: str
 |      :param recvWindow: the number of milliseconds the request is valid for
 |      :type recvWindow: int
 |      
 |      :returns: API response
 |      
 |      .. code-block:: python
 |      
 |          {
 |                  "CTR": {
 |                      "minWithdrawAmount": "70.00000000", //min withdraw amount
 |                      "depositStatus": false,//deposit status (false if ALL of networks' are false)
 |                      "withdrawFee": 35, // withdraw fee
 |                      "withdrawStatus": true, //withdraw status (false if ALL of networks' are false)
 |                      "depositTip": "Delisted, Deposit Suspended" //reason
 |                  },
 |                  "SKY": {
 |                      "minWithdrawAmount": "0.02000000",
 |                      "depositStatus": true,
 |                      "withdrawFee": 0.01,
 |                      "withdrawStatus": true
 |                  }
 |          }
 |      
 |      :raises: BinanceWithdrawException
 |  
 |  ggeett__aasssseett__ddiivviiddeenndd__hhiissttoorryy(self, **params)
 |      Query asset dividend record.
 |      
 |      https://binance-docs.github.io/apidocs/spot/en/#asset-dividend-record-user_data
 |      
 |      :param asset: optional
 |      :type asset: str
 |      :param startTime: optional
 |      :type startTime: long
 |      :param endTime: optional
 |      :type endTime: long
 |      :param recvWindow: the number of milliseconds the request is valid for
 |      :type recvWindow: int
 |      
 |      .. code:: python
 |      
 |          result = client.get_asset_dividend_history()
 |      
 |      :returns: API response
 |      
 |      .. code-block:: python
 |      
 |          {
 |              "rows":[
 |                  {
 |                      "amount":"10.00000000",
 |                      "asset":"BHFT",
 |                      "divTime":1563189166000,
 |                      "enInfo":"BHFT distribution",
 |                      "tranId":2968885920
 |                  },
 |                  {
 |                      "amount":"10.00000000",
 |                      "asset":"BHFT",
 |                      "divTime":1563189165000,
 |                      "enInfo":"BHFT distribution",
 |                      "tranId":2968885920
 |                  }
 |              ],
 |              "total":2
 |          }
 |      
 |      :raises: BinanceRequestException, BinanceAPIException
 |  
 |  ggeett__aavvgg__pprriiccee(self, **params)
 |      Current average price for a symbol.
 |      
 |      https://github.com/binance/binance-spot-api-docs/blob/master/rest-api.md#current-average-price
 |      
 |      :param symbol:
 |      :type symbol: str
 |      
 |      :returns: API response
 |      
 |      .. code-block:: python
 |      
 |          {
 |              "mins": 5,
 |              "price": "9.35751834"
 |          }
 |  
 |  ggeett__bbnnbb__bbuurrnn__ssppoott__mmaarrggiinn(self, **params)
 |      Get BNB Burn Status
 |      
 |      https://binance-docs.github.io/apidocs/spot/en/#get-bnb-burn-status-user_data
 |      
 |      .. code:: python
 |      
 |          status = client.get_bnb_burn_spot_margin()
 |      
 |      :returns: API response
 |      
 |      .. code-block:: python
 |      
 |          {
 |             "spotBNBBurn":true,
 |             "interestBNBBurn": false
 |          }
 |      
 |      
 |      :raises: BinanceRequestException, BinanceAPIException
 |  
 |  ggeett__ddeeppoossiitt__aaddddrreessss(self, coin: str, network: Union[str, NoneType] = None, **params)
 |      Fetch a deposit address for a symbol
 |      
 |      https://binance-docs.github.io/apidocs/spot/en/#deposit-address-supporting-network-user_data
 |      
 |      :param coin: required
 |      :type coin: str
 |      :param network: optional
 |      :type network: str
 |      :param recvWindow: the number of milliseconds the request is valid for
 |      :type recvWindow: int
 |      
 |      :returns: API response
 |      
 |      .. code-block:: python
 |      
 |          {
 |              "address": "1HPn8Rx2y6nNSfagQBKy27GB99Vbzg89wv",
 |              "coin": "BTC",
 |              "tag": "",
 |              "url": "https://btc.com/1HPn8Rx2y6nNSfagQBKy27GB99Vbzg89wv"
 |          }
 |      
 |      :raises: BinanceRequestException, BinanceAPIException
 |  
 |  ggeett__ddeeppoossiitt__hhiissttoorryy(self, **params)
 |      Fetch deposit history.
 |      
 |      https://binance-docs.github.io/apidocs/spot/en/#deposit-history-supporting-network-user_data
 |      
 |      :param coin: optional
 |      :type coin: str
 |      :type status: optional - 0(0:pending,1:success) optional
 |      :type status: int
 |      :param startTime: optional
 |      :type startTime: long
 |      :param endTime: optional
 |      :type endTime: long
 |      :param offset: optional - default:0
 |      :type offset: long
 |      :param limit: optional
 |      :type limit: long
 |      :param recvWindow: the number of milliseconds the request is valid for
 |      :type recvWindow: int
 |      
 |      :returns: API response
 |      
 |      .. code-block:: python
 |      
 |          [
 |              {
 |                  "amount":"0.00999800",
 |                  "coin":"PAXG",
 |                  "network":"ETH",
 |                  "status":1,
 |                  "address":"0x788cabe9236ce061e5a892e1a59395a81fc8d62c",
 |                  "addressTag":"",
 |                  "txId":"0xaad4654a3234aa6118af9b4b335f5ae81c360b2394721c019b5d1e75328b09f3",
 |                  "insertTime":1599621997000,
 |                  "transferType":0,
 |                  "confirmTimes":"12/12"
 |              },
 |              {
 |                  "amount":"0.50000000",
 |                  "coin":"IOTA",
 |                  "network":"IOTA",
 |                  "status":1,
 |                  "address":"SIZ9VLMHWATXKV99LH99CIGFJFUMLEHGWVZVNNZXRJJVWBPHYWPPBOSDORZ9EQSHCZAMPVAPGFYQAUUV9DROOXJLNW",
 |                  "addressTag":"",
 |                  "txId":"ESBFVQUTPIWQNJSPXFNHNYHSQNTGKRVKPRABQWTAXCDWOAKDKYWPTVG9BGXNVNKTLEJGESAVXIKIZ9999",
 |                  "insertTime":1599620082000,
 |                  "transferType":0,
 |                  "confirmTimes":"1/1"
 |              }
 |          ]
 |      
 |      :raises: BinanceRequestException, BinanceAPIException
 |  
 |  ggeett__dduusstt__lloogg(self, **params)
 |      Get log of small amounts exchanged for BNB.
 |      
 |      https://binance-docs.github.io/apidocs/spot/en/#dustlog-sapi-user_data
 |      
 |      :param startTime: optional
 |      :type startTime: int
 |      :param endTime: optional
 |      :type endTime: int
 |      :param recvWindow: the number of milliseconds the request is valid for
 |      :type recvWindow: int
 |      
 |      :returns: API response
 |      
 |      .. code-block:: python
 |      
 |          {
 |              "total": 8,   //Total counts of exchange
 |              "userAssetDribblets": [
 |                  {
 |                      "totalTransferedAmount": "0.00132256",   // Total transfered BNB amount for this exchange.
 |                      "totalServiceChargeAmount": "0.00002699",    //Total service charge amount for this exchange.
 |                      "transId": 45178372831,
 |                      "userAssetDribbletDetails": [           //Details of  this exchange.
 |                          {
 |                              "transId": 4359321,
 |                              "serviceChargeAmount": "0.000009",
 |                              "amount": "0.0009",
 |                              "operateTime": 1615985535000,
 |                              "transferedAmount": "0.000441",
 |                              "fromAsset": "USDT"
 |                          },
 |                          {
 |                              "transId": 4359321,
 |                              "serviceChargeAmount": "0.00001799",
 |                              "amount": "0.0009",
 |                              "operateTime": "2018-05-03 17:07:04",
 |                              "transferedAmount": "0.00088156",
 |                              "fromAsset": "ETH"
 |                          }
 |                      ]
 |                  },
 |                  {
 |                      "operateTime":1616203180000,
 |                      "totalTransferedAmount": "0.00058795",
 |                      "totalServiceChargeAmount": "0.000012",
 |                      "transId": 4357015,
 |                      "userAssetDribbletDetails": [
 |                          {
 |                              "transId": 4357015,
 |                              "serviceChargeAmount": "0.00001"
 |                              "amount": "0.001",
 |                              "operateTime": 1616203180000,
 |                              "transferedAmount": "0.00049",
 |                              "fromAsset": "USDT"
 |                          },
 |                          {
 |                              "transId": 4357015,
 |                              "serviceChargeAmount": "0.000002"
 |                              "amount": "0.0001",
 |                              "operateTime": 1616203180000,
 |                              "transferedAmount": "0.00009795",
 |                              "fromAsset": "ETH"
 |                          }
 |                      ]
 |                  }
 |              ]
 |          }
 |      
 |      :raises: BinanceWithdrawException
 |  
 |  ggeett__eexxcchhaannggee__iinnffoo(self) -> Dict
 |      Return rate limits and list of symbols
 |      
 |      :returns: list - List of product dictionaries
 |      
 |      .. code-block:: python
 |      
 |          {
 |              "timezone": "UTC",
 |              "serverTime": 1508631584636,
 |              "rateLimits": [
 |                  {
 |                      "rateLimitType": "REQUESTS",
 |                      "interval": "MINUTE",
 |                      "limit": 1200
 |                  },
 |                  {
 |                      "rateLimitType": "ORDERS",
 |                      "interval": "SECOND",
 |                      "limit": 10
 |                  },
 |                  {
 |                      "rateLimitType": "ORDERS",
 |                      "interval": "DAY",
 |                      "limit": 100000
 |                  }
 |              ],
 |              "exchangeFilters": [],
 |              "symbols": [
 |                  {
 |                      "symbol": "ETHBTC",
 |                      "status": "TRADING",
 |                      "baseAsset": "ETH",
 |                      "baseAssetPrecision": 8,
 |                      "quoteAsset": "BTC",
 |                      "quotePrecision": 8,
 |                      "orderTypes": ["LIMIT", "MARKET"],
 |                      "icebergAllowed": false,
 |                      "filters": [
 |                          {
 |                              "filterType": "PRICE_FILTER",
 |                              "minPrice": "0.00000100",
 |                              "maxPrice": "100000.00000000",
 |                              "tickSize": "0.00000100"
 |                          }, {
 |                              "filterType": "LOT_SIZE",
 |                              "minQty": "0.00100000",
 |                              "maxQty": "100000.00000000",
 |                              "stepSize": "0.00100000"
 |                          }, {
 |                              "filterType": "MIN_NOTIONAL",
 |                              "minNotional": "0.00100000"
 |                          }
 |                      ]
 |                  }
 |              ]
 |          }
 |      
 |      :raises: BinanceRequestException, BinanceAPIException
 |  
 |  ggeett__ffiixxeedd__aaccttiivviittyy__pprroojjeecctt__lliisstt(self, **params)
 |      Get Fixed and Activity Project List
 |      
 |      https://binance-docs.github.io/apidocs/spot/en/#get-fixed-and-activity-project-list-user_data
 |      
 |      :param asset: optional
 |      :type asset: str
 |      :param type: required - "ACTIVITY", "CUSTOMIZED_FIXED"
 |      :type type: str
 |      :param status: optional - "ALL", "SUBSCRIBABLE", "UNSUBSCRIBABLE"; default "ALL"
 |      :type status: str
 |      :param sortBy: optional - "START_TIME", "LOT_SIZE", "INTEREST_RATE", "DURATION"; default "START_TIME"
 |      :type sortBy: str
 |      :param current: optional - Currently querying page. Start from 1. Default:1
 |      :type current: int
 |      :param size: optional - Default:10, Max:100
 |      :type size: int
 |      :param recvWindow: the number of milliseconds the request is valid for
 |      :type recvWindow: int
 |      
 |      :returns: API response
 |      
 |      .. code-block:: python
 |      
 |          [
 |              {
 |                  "asset": "USDT",
 |                  "displayPriority": 1,
 |                  "duration": 90,
 |                  "interestPerLot": "1.35810000",
 |                  "interestRate": "0.05510000",
 |                  "lotSize": "100.00000000",
 |                  "lotsLowLimit": 1,
 |                  "lotsPurchased": 74155,
 |                  "lotsUpLimit": 80000,
 |                  "maxLotsPerUser": 2000,
 |                  "needKyc": False,
 |                  "projectId": "CUSDT90DAYSS001",
 |                  "projectName": "USDT",
 |                  "status": "PURCHASING",
 |                  "type": "CUSTOMIZED_FIXED",
 |                  "withAreaLimitation": False
 |              }
 |          ]
 |      
 |      :raises: BinanceRequestException, BinanceAPIException
 |  
 |  ggeett__hhiissttoorriiccaall__kklliinneess(self, symbol, interval, start_str, end_str=None, limit=500, klines_type: binance.enums.HistoricalKlinesType = <HistoricalKlinesType.SPOT: 1>)
 |      Get Historical Klines from Binance
 |      
 |      :param symbol: Name of symbol pair e.g BNBBTC
 |      :type symbol: str
 |      :param interval: Binance Kline interval
 |      :type interval: str
 |      :param start_str: Start date string in UTC format or timestamp in milliseconds
 |      :type start_str: str|int
 |      :param end_str: optional - end date string in UTC format or timestamp in milliseconds (default will fetch everything up to now)
 |      :type end_str: str|int
 |      :param limit: Default 500; max 1000.
 |      :type limit: int
 |      :param klines_type: Historical klines type: SPOT or FUTURES
 |      :type klines_type: HistoricalKlinesType
 |      
 |      :return: list of OHLCV values
 |  
 |  ggeett__hhiissttoorriiccaall__kklliinneess__ggeenneerraattoorr(self, symbol, interval, start_str, end_str=None, klines_type: binance.enums.HistoricalKlinesType = <HistoricalKlinesType.SPOT: 1>)
 |      Get Historical Klines generator from Binance
 |      
 |      :param symbol: Name of symbol pair e.g BNBBTC
 |      :type symbol: str
 |      :param interval: Binance Kline interval
 |      :type interval: str
 |      :param start_str: Start date string in UTC format or timestamp in milliseconds
 |      :type start_str: str|int
 |      :param end_str: optional - end date string in UTC format or timestamp in milliseconds (default will fetch everything up to now)
 |      :type end_str: str|int
 |      :param klines_type: Historical klines type: SPOT or FUTURES
 |      :type klines_type: HistoricalKlinesType
 |      
 |      :return: generator of OHLCV values
 |  
 |  ggeett__hhiissttoorriiccaall__ttrraaddeess(self, **params) -> Dict
 |      Get older trades.
 |      
 |      https://github.com/binance/binance-spot-api-docs/blob/master/rest-api.md#old-trade-lookup
 |      
 |      :param symbol: required
 |      :type symbol: str
 |      :param limit:  Default 500; max 500.
 |      :type limit: int
 |      :param fromId:  TradeId to fetch from. Default gets most recent trades.
 |      :type fromId: str
 |      
 |      :returns: API response
 |      
 |      .. code-block:: python
 |      
 |          [
 |              {
 |                  "id": 28457,
 |                  "price": "4.00000100",
 |                  "qty": "12.00000000",
 |                  "time": 1499865549590,
 |                  "isBuyerMaker": true,
 |                  "isBestMatch": true
 |              }
 |          ]
 |      
 |      :raises: BinanceRequestException, BinanceAPIException
 |  
 |  ggeett__iissoollaatteedd__mmaarrggiinn__aaccccoouunntt(self, **params)
 |      Query isolated margin account details
 |      
 |      https://binance-docs.github.io/apidocs/spot/en/#query-isolated-margin-account-info-user_data
 |      
 |      :param symbols: optional up to 5 margin pairs as a comma separated string
 |      :type asset: str
 |      
 |      .. code:: python
 |      
 |          account_info = client.get_isolated_margin_account()
 |          account_info = client.get_isolated_margin_account(symbols="BTCUSDT,ETHUSDT")
 |      
 |      :returns: API response
 |      
 |      .. code-block:: python
 |      
 |          If "symbols" is not sent:
 |      
 |              {
 |              "assets":[
 |                  {
 |                      "baseAsset":
 |                      {
 |                      "asset": "BTC",
 |                      "borrowEnabled": true,
 |                      "borrowed": "0.00000000",
 |                      "free": "0.00000000",
 |                      "interest": "0.00000000",
 |                      "locked": "0.00000000",
 |                      "netAsset": "0.00000000",
 |                      "netAssetOfBtc": "0.00000000",
 |                      "repayEnabled": true,
 |                      "totalAsset": "0.00000000"
 |                      },
 |                      "quoteAsset":
 |                      {
 |                      "asset": "USDT",
 |                      "borrowEnabled": true,
 |                      "borrowed": "0.00000000",
 |                      "free": "0.00000000",
 |                      "interest": "0.00000000",
 |                      "locked": "0.00000000",
 |                      "netAsset": "0.00000000",
 |                      "netAssetOfBtc": "0.00000000",
 |                      "repayEnabled": true,
 |                      "totalAsset": "0.00000000"
 |                      },
 |                      "symbol": "BTCUSDT"
 |                      "isolatedCreated": true,
 |                      "marginLevel": "0.00000000",
 |                      "marginLevelStatus": "EXCESSIVE", // "EXCESSIVE", "NORMAL", "MARGIN_CALL", "PRE_LIQUIDATION", "FORCE_LIQUIDATION"
 |                      "marginRatio": "0.00000000",
 |                      "indexPrice": "10000.00000000"
 |                      "liquidatePrice": "1000.00000000",
 |                      "liquidateRate": "1.00000000"
 |                      "tradeEnabled": true
 |                  }
 |                  ],
 |                  "totalAssetOfBtc": "0.00000000",
 |                  "totalLiabilityOfBtc": "0.00000000",
 |                  "totalNetAssetOfBtc": "0.00000000"
 |              }
 |      
 |          If "symbols" is sent:
 |      
 |              {
 |              "assets":[
 |                  {
 |                      "baseAsset":
 |                      {
 |                      "asset": "BTC",
 |                      "borrowEnabled": true,
 |                      "borrowed": "0.00000000",
 |                      "free": "0.00000000",
 |                      "interest": "0.00000000",
 |                      "locked": "0.00000000",
 |                      "netAsset": "0.00000000",
 |                      "netAssetOfBtc": "0.00000000",
 |                      "repayEnabled": true,
 |                      "totalAsset": "0.00000000"
 |                      },
 |                      "quoteAsset":
 |                      {
 |                      "asset": "USDT",
 |                      "borrowEnabled": true,
 |                      "borrowed": "0.00000000",
 |                      "free": "0.00000000",
 |                      "interest": "0.00000000",
 |                      "locked": "0.00000000",
 |                      "netAsset": "0.00000000",
 |                      "netAssetOfBtc": "0.00000000",
 |                      "repayEnabled": true,
 |                      "totalAsset": "0.00000000"
 |                      },
 |                      "symbol": "BTCUSDT"
 |                      "isolatedCreated": true,
 |                      "marginLevel": "0.00000000",
 |                      "marginLevelStatus": "EXCESSIVE", // "EXCESSIVE", "NORMAL", "MARGIN_CALL", "PRE_LIQUIDATION", "FORCE_LIQUIDATION"
 |                      "marginRatio": "0.00000000",
 |                      "indexPrice": "10000.00000000"
 |                      "liquidatePrice": "1000.00000000",
 |                      "liquidateRate": "1.00000000"
 |                      "tradeEnabled": true
 |                  }
 |                  ]
 |              }
 |  
 |  ggeett__iissoollaatteedd__mmaarrggiinn__ssyymmbbooll(self, **params)
 |      Query isolated margin symbol info
 |      
 |      https://binance-docs.github.io/apidocs/spot/en/#query-isolated-margin-symbol-user_data
 |      
 |      :param symbol: name of the symbol pair
 |      :type symbol: str
 |      
 |      .. code:: python
 |      
 |          pair_details = client.get_isolated_margin_symbol(symbol='BTCUSDT')
 |      
 |      :returns: API response
 |      
 |      .. code-block:: python
 |      
 |          {
 |          "symbol":"BTCUSDT",
 |          "base":"BTC",
 |          "quote":"USDT",
 |          "isMarginTrade":true,
 |          "isBuyAllowed":true,
 |          "isSellAllowed":true
 |          }
 |      
 |      
 |      :raises: BinanceRequestException, BinanceAPIException
 |  
 |  ggeett__kklliinneess(self, **params) -> Dict
 |      Kline/candlestick bars for a symbol. Klines are uniquely identified by their open time.
 |      
 |      https://github.com/binance/binance-spot-api-docs/blob/master/rest-api.md#klinecandlestick-data
 |      
 |      :param symbol: required
 |      :type symbol: str
 |      :param interval: -
 |      :type interval: str
 |      :param limit: - Default 500; max 500.
 |      :type limit: int
 |      :param startTime:
 |      :type startTime: int
 |      :param endTime:
 |      :type endTime: int
 |      
 |      :returns: API response
 |      
 |      .. code-block:: python
 |      
 |          [
 |              [
 |                  1499040000000,      # Open time
 |                  "0.01634790",       # Open
 |                  "0.80000000",       # High
 |                  "0.01575800",       # Low
 |                  "0.01577100",       # Close
 |                  "148976.11427815",  # Volume
 |                  1499644799999,      # Close time
 |                  "2434.19055334",    # Quote asset volume
 |                  308,                # Number of trades
 |                  "1756.87402397",    # Taker buy base asset volume
 |                  "28.46694368",      # Taker buy quote asset volume
 |                  "17928899.62484339" # Can be ignored
 |              ]
 |          ]
 |      
 |      :raises: BinanceRequestException, BinanceAPIException
 |  
 |  ggeett__lleennddiinngg__aaccccoouunntt(self, **params)
 |      Get Lending Account Details
 |      
 |      https://binance-docs.github.io/apidocs/spot/en/#lending-account-user_data
 |  
 |  ggeett__lleennddiinngg__ddaaiillyy__qquuoottaa__lleefftt(self, **params)
 |      Get Left Daily Purchase Quota of Flexible Product.
 |      
 |      https://binance-docs.github.io/apidocs/spot/en/#get-left-daily-purchase-quota-of-flexible-product-user_data
 |  
 |  ggeett__lleennddiinngg__ddaaiillyy__rreeddeemmppttiioonn__qquuoottaa(self, **params)
 |      Get Left Daily Redemption Quota of Flexible Product
 |      
 |      https://binance-docs.github.io/apidocs/spot/en/#get-left-daily-redemption-quota-of-flexible-product-user_data
 |  
 |  ggeett__lleennddiinngg__iinntteerreesstt__hhiissttoorryy(self, **params)
 |      Get Lending Interest History
 |      
 |      https://binance-docs.github.io/apidocs/spot/en/#get-interest-history-user_data-2
 |  
 |  ggeett__lleennddiinngg__ppoossiittiioonn(self, **params)
 |      Get Flexible Product Position
 |      
 |      https://binance-docs.github.io/apidocs/spot/en/#get-flexible-product-position-user_data
 |  
 |  ggeett__lleennddiinngg__pprroodduucctt__lliisstt(self, **params)
 |      Get Lending Product List
 |      
 |      https://binance-docs.github.io/apidocs/spot/en/#get-flexible-product-list-user_data
 |  
 |  ggeett__lleennddiinngg__ppuurrcchhaassee__hhiissttoorryy(self, **params)
 |      Get Lending Purchase History
 |      
 |      https://binance-docs.github.io/apidocs/spot/en/#get-purchase-record-user_data
 |  
 |  ggeett__lleennddiinngg__rreeddeemmppttiioonn__hhiissttoorryy(self, **params)
 |      Get Lending Redemption History
 |      
 |      https://binance-docs.github.io/apidocs/spot/en/#get-redemption-record-user_data
 |  
 |  ggeett__mmaarrggiinn__aaccccoouunntt(self, **params)
 |      Query cross-margin account details
 |      
 |      https://binance-docs.github.io/apidocs/spot/en/#query-cross-margin-account-details-user_data
 |      
 |      :returns: API response
 |      
 |      .. code-block:: python
 |      
 |          {
 |              "borrowEnabled": true,
 |              "marginLevel": "11.64405625",
 |              "totalAssetOfBtc": "6.82728457",
 |              "totalLiabilityOfBtc": "0.58633215",
 |              "totalNetAssetOfBtc": "6.24095242",
 |              "tradeEnabled": true,
 |              "transferEnabled": true,
 |              "userAssets": [
 |                  {
 |                      "asset": "BTC",
 |                      "borrowed": "0.00000000",
 |                      "free": "0.00499500",
 |                      "interest": "0.00000000",
 |                      "locked": "0.00000000",
 |                      "netAsset": "0.00499500"
 |                  },
 |                  {
 |                      "asset": "BNB",
 |                      "borrowed": "201.66666672",
 |                      "free": "2346.50000000",
 |                      "interest": "0.00000000",
 |                      "locked": "0.00000000",
 |                      "netAsset": "2144.83333328"
 |                  },
 |                  {
 |                      "asset": "ETH",
 |                      "borrowed": "0.00000000",
 |                      "free": "0.00000000",
 |                      "interest": "0.00000000",
 |                      "locked": "0.00000000",
 |                      "netAsset": "0.00000000"
 |                  },
 |                  {
 |                      "asset": "USDT",
 |                      "borrowed": "0.00000000",
 |                      "free": "0.00000000",
 |                      "interest": "0.00000000",
 |                      "locked": "0.00000000",
 |                      "netAsset": "0.00000000"
 |                  }
 |              ]
 |          }
 |      
 |      :raises: BinanceRequestException, BinanceAPIException
 |  
 |  ggeett__mmaarrggiinn__aasssseett(self, **params)
 |      Query cross-margin asset
 |      
 |      https://binance-docs.github.io/apidocs/spot/en/#query-margin-asset-market_data
 |      
 |      :param asset: name of the asset
 |      :type asset: str
 |      
 |      .. code:: python
 |      
 |          asset_details = client.get_margin_asset(asset='BNB')
 |      
 |      :returns: API response
 |      
 |      .. code-block:: python
 |      
 |          {
 |              "assetFullName": "Binance Coin",
 |              "assetName": "BNB",
 |              "isBorrowable": false,
 |              "isMortgageable": true,
 |              "userMinBorrow": "0.00000000",
 |              "userMinRepay": "0.00000000"
 |          }
 |      
 |      :raises: BinanceRequestException, BinanceAPIException
 |  
 |  ggeett__mmaarrggiinn__llooaann__ddeettaaiillss(self, **params)
 |      Query loan record
 |      
 |      txId or startTime must be sent. txId takes precedence.
 |      
 |      https://binance-docs.github.io/apidocs/spot/en/#query-loan-record-user_data
 |      
 |      :param asset: required
 |      :type asset: str
 |      :param isolatedSymbol: isolated symbol (if querying isolated margin)
 |      :type isolatedSymbol: str
 |      :param txId: the tranId in of the created loan
 |      :type txId: str
 |      :param startTime: earliest timestamp to filter transactions
 |      :type startTime: str
 |      :param endTime: Used to uniquely identify this cancel. Automatically generated by default.
 |      :type endTime: str
 |      :param current: Currently querying page. Start from 1. Default:1
 |      :type current: str
 |      :param size: Default:10 Max:100
 |      :type size: int
 |      :param recvWindow: the number of milliseconds the request is valid for
 |      :type recvWindow: int
 |      
 |      :returns: API response
 |      
 |          {
 |              "rows": [
 |                  {
 |                      "asset": "BNB",
 |                      "principal": "0.84624403",
 |                      "timestamp": 1555056425000,
 |                      //one of PENDING (pending to execution), CONFIRMED (successfully loaned), FAILED (execution failed, nothing happened to your account);
 |                      "status": "CONFIRMED"
 |                  }
 |              ],
 |              "total": 1
 |          }
 |      
 |      :raises: BinanceRequestException, BinanceAPIException
 |  
 |  ggeett__mmaarrggiinn__oorrddeerr(self, **params)
 |      Query margin accounts order
 |      
 |      Either orderId or origClientOrderId must be sent.
 |      
 |      For some historical orders cummulativeQuoteQty will be < 0, meaning the data is not available at this time.
 |      
 |      https://binance-docs.github.io/apidocs/spot/en/#query-margin-account-39-s-order-user_data
 |      
 |      :param symbol: required
 |      :type symbol: str
 |      :param isIsolated: set to 'TRUE' for isolated margin (default 'FALSE')
 |      :type isIsolated: str
 |      :param orderId:
 |      :type orderId: str
 |      :param origClientOrderId:
 |      :type origClientOrderId: str
 |      :param recvWindow: the number of milliseconds the request is valid for
 |      :type recvWindow: int
 |      
 |      :returns: API response
 |      
 |          {
 |              "clientOrderId": "ZwfQzuDIGpceVhKW5DvCmO",
 |              "cummulativeQuoteQty": "0.00000000",
 |              "executedQty": "0.00000000",
 |              "icebergQty": "0.00000000",
 |              "isWorking": true,
 |              "orderId": 213205622,
 |              "origQty": "0.30000000",
 |              "price": "0.00493630",
 |              "side": "SELL",
 |              "status": "NEW",
 |              "stopPrice": "0.00000000",
 |              "symbol": "BNBBTC",
 |              "time": 1562133008725,
 |              "timeInForce": "GTC",
 |              "type": "LIMIT",
 |              "updateTime": 1562133008725
 |          }
 |      
 |      :raises: BinanceRequestException, BinanceAPIException
 |  
 |  ggeett__mmaarrggiinn__pprriiccee__iinnddeexx(self, **params)
 |      Query margin priceIndex
 |      
 |      https://binance-docs.github.io/apidocs/spot/en/#query-margin-priceindex-market_data
 |      
 |      :param symbol: name of the symbol pair
 |      :type symbol: str
 |      
 |      .. code:: python
 |      
 |          price_index_details = client.get_margin_price_index(symbol='BTCUSDT')
 |      
 |      :returns: API response
 |      
 |      .. code-block:: python
 |      
 |          {
 |              "calcTime": 1562046418000,
 |              "price": "0.00333930",
 |              "symbol": "BNBBTC"
 |          }
 |      
 |      :raises: BinanceRequestException, BinanceAPIException
 |  
 |  ggeett__mmaarrggiinn__rreeppaayy__ddeettaaiillss(self, **params)
 |      Query repay record
 |      
 |      txId or startTime must be sent. txId takes precedence.
 |      
 |      https://binance-docs.github.io/apidocs/spot/en/#query-repay-record-user_data
 |      
 |      :param asset: required
 |      :type asset: str
 |      :param isolatedSymbol: isolated symbol (if querying isolated margin)
 |      :type isolatedSymbol: str
 |      :param txId: the tranId in of the created loan
 |      :type txId: str
 |      :param startTime:
 |      :type startTime: str
 |      :param endTime: Used to uniquely identify this cancel. Automatically generated by default.
 |      :type endTime: str
 |      :param current: Currently querying page. Start from 1. Default:1
 |      :type current: str
 |      :param size: Default:10 Max:100
 |      :type size: int
 |      :param recvWindow: the number of milliseconds the request is valid for
 |      :type recvWindow: int
 |      
 |      :returns: API response
 |      
 |          {
 |              "rows": [
 |                  {
 |                      //Total amount repaid
 |                      "amount": "14.00000000",
 |                      "asset": "BNB",
 |                      //Interest repaid
 |                      "interest": "0.01866667",
 |                      //Principal repaid
 |                      "principal": "13.98133333",
 |                      //one of PENDING (pending to execution), CONFIRMED (successfully loaned), FAILED (execution failed, nothing happened to your account);
 |                      "status": "CONFIRMED",
 |                      "timestamp": 1563438204000,
 |                      "txId": 2970933056
 |                  }
 |              ],
 |              "total": 1
 |          }
 |      
 |      :raises: BinanceRequestException, BinanceAPIException
 |  
 |  ggeett__mmaarrggiinn__ssyymmbbooll(self, **params)
 |      Query cross-margin symbol info
 |      
 |      https://binance-docs.github.io/apidocs/spot/en/#query-cross-margin-pair-market_data
 |      
 |      :param symbol: name of the symbol pair
 |      :type symbol: str
 |      
 |      .. code:: python
 |      
 |          pair_details = client.get_margin_symbol(symbol='BTCUSDT')
 |      
 |      :returns: API response
 |      
 |      .. code-block:: python
 |      
 |          {
 |              "id":323355778339572400,
 |              "symbol":"BTCUSDT",
 |              "base":"BTC",
 |              "quote":"USDT",
 |              "isMarginTrade":true,
 |              "isBuyAllowed":true,
 |              "isSellAllowed":true
 |          }
 |      
 |      
 |      :raises: BinanceRequestException, BinanceAPIException
 |  
 |  ggeett__mmaarrggiinn__ttrraaddeess(self, **params)
 |      Query margin accounts trades
 |      
 |      If fromId is set, it will get orders >= that fromId. Otherwise most recent orders are returned.
 |      
 |      https://binance-docs.github.io/apidocs/spot/en/#query-margin-account-39-s-trade-list-user_data
 |      
 |      :param symbol: required
 |      :type symbol: str
 |      :param isIsolated: set to 'TRUE' for isolated margin (default 'FALSE')
 |      :type isIsolated: str
 |      :param fromId: optional
 |      :type fromId: str
 |      :param startTime: optional
 |      :type startTime: str
 |      :param endTime: optional
 |      :type endTime: str
 |      :param limit: Default 500; max 1000
 |      :type limit: int
 |      :param recvWindow: the number of milliseconds the request is valid for
 |      :type recvWindow: int
 |      
 |      :returns: API response
 |      
 |          [
 |              {
 |                  "commission": "0.00006000",
 |                  "commissionAsset": "BTC",
 |                  "id": 34,
 |                  "isBestMatch": true,
 |                  "isBuyer": false,
 |                  "isMaker": false,
 |                  "orderId": 39324,
 |                  "price": "0.02000000",
 |                  "qty": "3.00000000",
 |                  "symbol": "BNBBTC",
 |                  "time": 1561973357171
 |              }, {
 |                  "commission": "0.00002950",
 |                  "commissionAsset": "BTC",
 |                  "id": 32,
 |                  "isBestMatch": true,
 |                  "isBuyer": false,
 |                  "isMaker": true,
 |                  "orderId": 39319,
 |                  "price": "0.00590000",
 |                  "qty": "5.00000000",
 |                  "symbol": "BNBBTC",
 |                  "time": 1561964645345
 |              }
 |          ]
 |      
 |      
 |      :raises: BinanceRequestException, BinanceAPIException
 |  
 |  ggeett__mmaaxx__mmaarrggiinn__llooaann(self, **params)
 |      Query max borrow amount for an asset
 |      
 |      https://binance-docs.github.io/apidocs/spot/en/#query-max-borrow-user_data
 |      
 |      :param asset: required
 |      :type asset: str
 |      :param isolatedSymbol: isolated symbol (if querying isolated margin)
 |      :type isolatedSymbol: str
 |      :param recvWindow: the number of milliseconds the request is valid for
 |      :type recvWindow: int
 |      
 |      :returns: API response
 |      
 |          {
 |              "amount": "1.69248805"
 |          }
 |      
 |      :raises: BinanceRequestException, BinanceAPIException
 |  
 |  ggeett__mmaaxx__mmaarrggiinn__ttrraannssffeerr(self, **params)
 |      Query max transfer-out amount
 |      
 |      https://binance-docs.github.io/apidocs/spot/en/#query-max-transfer-out-amount-user_data
 |      
 |      :param asset: required
 |      :type asset: str
 |      :param isolatedSymbol: isolated symbol (if querying isolated margin)
 |      :type isolatedSymbol: str
 |      :param recvWindow: the number of milliseconds the request is valid for
 |      :type recvWindow: int
 |      
 |      :returns: API response
 |      
 |          {
 |              "amount": "3.59498107"
 |          }
 |      
 |      :raises: BinanceRequestException, BinanceAPIException
 |  
 |  ggeett__mmyy__ttrraaddeess(self, **params)
 |      Get trades for a specific symbol.
 |      
 |      https://github.com/binance/binance-spot-api-docs/blob/master/rest-api.md#account-trade-list-user_data
 |      
 |      :param symbol: required
 |      :type symbol: str
 |      :param limit: Default 500; max 500.
 |      :type limit: int
 |      :param fromId: TradeId to fetch from. Default gets most recent trades.
 |      :type fromId: int
 |      :param recvWindow: the number of milliseconds the request is valid for
 |      :type recvWindow: int
 |      
 |      :returns: API response
 |      
 |      .. code-block:: python
 |      
 |          [
 |              {
 |                  "id": 28457,
 |                  "price": "4.00000100",
 |                  "qty": "12.00000000",
 |                  "commission": "10.10000000",
 |                  "commissionAsset": "BNB",
 |                  "time": 1499865549590,
 |                  "isBuyer": true,
 |                  "isMaker": false,
 |                  "isBestMatch": true
 |              }
 |          ]
 |      
 |      :raises: BinanceRequestException, BinanceAPIException
 |  
 |  ggeett__ooppeenn__mmaarrggiinn__oorrddeerrss(self, **params)
 |      Query margin accounts open orders
 |      
 |      If the symbol is not sent, orders for all symbols will be returned in an array (cross-margin only).
 |      
 |      If querying isolated margin orders, both the isIsolated='TRUE' and symbol=symbol_name must be set.
 |      
 |      When all symbols are returned, the number of requests counted against the rate limiter is equal to the number
 |      of symbols currently trading on the exchange.
 |      
 |      https://binance-docs.github.io/apidocs/spot/en/#query-margin-account-39-s-open-order-user_data
 |      
 |      :param symbol: optional
 |      :type symbol: str
 |      :param isIsolated: set to 'TRUE' for isolated margin (default 'FALSE')
 |      :type isIsolated: str
 |      :param recvWindow: the number of milliseconds the request is valid for
 |      :type recvWindow: int
 |      
 |      :returns: API response
 |      
 |          [
 |              {
 |                  "clientOrderId": "qhcZw71gAkCCTv0t0k8LUK",
 |                  "cummulativeQuoteQty": "0.00000000",
 |                  "executedQty": "0.00000000",
 |                  "icebergQty": "0.00000000",
 |                  "isWorking": true,
 |                  "orderId": 211842552,
 |                  "origQty": "0.30000000",
 |                  "price": "0.00475010",
 |                  "side": "SELL",
 |                  "status": "NEW",
 |                  "stopPrice": "0.00000000",
 |                  "symbol": "BNBBTC",
 |                  "time": 1562040170089,
 |                  "timeInForce": "GTC",
 |                  "type": "LIMIT",
 |                  "updateTime": 1562040170089
 |              }
 |          ]
 |      
 |      :raises: BinanceRequestException, BinanceAPIException
 |  
 |  ggeett__ooppeenn__oorrddeerrss(self, **params)
 |      Get all open orders on a symbol.
 |      
 |      https://github.com/binance/binance-spot-api-docs/blob/master/rest-api.md#current-open-orders-user_data
 |      
 |      :param symbol: optional
 |      :type symbol: str
 |      :param recvWindow: the number of milliseconds the request is valid for
 |      :type recvWindow: int
 |      
 |      :returns: API response
 |      
 |      .. code-block:: python
 |      
 |          [
 |              {
 |                  "symbol": "LTCBTC",
 |                  "orderId": 1,
 |                  "clientOrderId": "myOrder1",
 |                  "price": "0.1",
 |                  "origQty": "1.0",
 |                  "executedQty": "0.0",
 |                  "status": "NEW",
 |                  "timeInForce": "GTC",
 |                  "type": "LIMIT",
 |                  "side": "BUY",
 |                  "stopPrice": "0.0",
 |                  "icebergQty": "0.0",
 |                  "time": 1499827319559
 |              }
 |          ]
 |      
 |      :raises: BinanceRequestException, BinanceAPIException
 |  
 |  ggeett__oorrddeerr(self, **params)
 |      Check an order's status. Either orderId or origClientOrderId must be sent.
 |      
 |      https://github.com/binance/binance-spot-api-docs/blob/master/rest-api.md#query-order-user_data
 |      
 |      :param symbol: required
 |      :type symbol: str
 |      :param orderId: The unique order id
 |      :type orderId: int
 |      :param origClientOrderId: optional
 |      :type origClientOrderId: str
 |      :param recvWindow: the number of milliseconds the request is valid for
 |      :type recvWindow: int
 |      
 |      :returns: API response
 |      
 |      .. code-block:: python
 |      
 |          {
 |              "symbol": "LTCBTC",
 |              "orderId": 1,
 |              "clientOrderId": "myOrder1",
 |              "price": "0.1",
 |              "origQty": "1.0",
 |              "executedQty": "0.0",
 |              "status": "NEW",
 |              "timeInForce": "GTC",
 |              "type": "LIMIT",
 |              "side": "BUY",
 |              "stopPrice": "0.0",
 |              "icebergQty": "0.0",
 |              "time": 1499827319559
 |          }
 |      
 |      :raises: BinanceRequestException, BinanceAPIException
 |  
 |  ggeett__oorrddeerr__bbooookk(self, **params) -> Dict
 |      Get the Order Book for the market
 |      
 |      https://github.com/binance/binance-spot-api-docs/blob/master/rest-api.md#order-book
 |      
 |      :param symbol: required
 |      :type symbol: str
 |      :param limit:  Default 100; max 1000
 |      :type limit: int
 |      
 |      :returns: API response
 |      
 |      .. code-block:: python
 |      
 |          {
 |              "lastUpdateId": 1027024,
 |              "bids": [
 |                  [
 |                      "4.00000000",     # PRICE
 |                      "431.00000000",   # QTY
 |                      []                # Can be ignored
 |                  ]
 |              ],
 |              "asks": [
 |                  [
 |                      "4.00000200",
 |                      "12.00000000",
 |                      []
 |                  ]
 |              ]
 |          }
 |      
 |      :raises: BinanceRequestException, BinanceAPIException
 |  
 |  ggeett__oorrddeerrbbooookk__ttiicckkeerr(self, **params)
 |      Latest price for a symbol or symbols.
 |      
 |      https://github.com/binance/binance-spot-api-docs/blob/master/rest-api.md#symbol-order-book-ticker
 |      
 |      :param symbol:
 |      :type symbol: str
 |      
 |      :returns: API response
 |      
 |      .. code-block:: python
 |      
 |          {
 |              "symbol": "LTCBTC",
 |              "bidPrice": "4.00000000",
 |              "bidQty": "431.00000000",
 |              "askPrice": "4.00000200",
 |              "askQty": "9.00000000"
 |          }
 |      
 |      OR
 |      
 |      .. code-block:: python
 |      
 |          [
 |              {
 |                  "symbol": "LTCBTC",
 |                  "bidPrice": "4.00000000",
 |                  "bidQty": "431.00000000",
 |                  "askPrice": "4.00000200",
 |                  "askQty": "9.00000000"
 |              },
 |              {
 |                  "symbol": "ETHBTC",
 |                  "bidPrice": "0.07946700",
 |                  "bidQty": "9.00000000",
 |                  "askPrice": "100000.00000000",
 |                  "askQty": "1000.00000000"
 |              }
 |          ]
 |      
 |      :raises: BinanceRequestException, BinanceAPIException
 |  
 |  ggeett__oorrddeerrbbooookk__ttiicckkeerrss(self) -> Dict
 |      Best price/qty on the order book for all symbols.
 |      
 |      https://binance-docs.github.io/apidocs/spot/en/#symbol-order-book-ticker
 |      
 |      :param symbol: optional
 |      :type symbol: str
 |      
 |      :returns: List of order book market entries
 |      
 |      .. code-block:: python
 |      
 |          [
 |              {
 |                  "symbol": "LTCBTC",
 |                  "bidPrice": "4.00000000",
 |                  "bidQty": "431.00000000",
 |                  "askPrice": "4.00000200",
 |                  "askQty": "9.00000000"
 |              },
 |              {
 |                  "symbol": "ETHBTC",
 |                  "bidPrice": "0.07946700",
 |                  "bidQty": "9.00000000",
 |                  "askPrice": "100000.00000000",
 |                  "askQty": "1000.00000000"
 |              }
 |          ]
 |      
 |      :raises: BinanceRequestException, BinanceAPIException
 |  
 |  ggeett__pprroodduuccttss(self) -> Dict
 |      Return list of products currently listed on Binance
 |      
 |      Use get_exchange_info() call instead
 |      
 |      :returns: list - List of product dictionaries
 |      
 |      :raises: BinanceRequestException, BinanceAPIException
 |  
 |  ggeett__rreecceenntt__ttrraaddeess(self, **params) -> Dict
 |      Get recent trades (up to last 500).
 |      
 |      https://github.com/binance/binance-spot-api-docs/blob/master/rest-api.md#recent-trades-list
 |      
 |      :param symbol: required
 |      :type symbol: str
 |      :param limit:  Default 500; max 500.
 |      :type limit: int
 |      
 |      :returns: API response
 |      
 |      .. code-block:: python
 |      
 |          [
 |              {
 |                  "id": 28457,
 |                  "price": "4.00000100",
 |                  "qty": "12.00000000",
 |                  "time": 1499865549590,
 |                  "isBuyerMaker": true,
 |                  "isBestMatch": true
 |              }
 |          ]
 |      
 |      :raises: BinanceRequestException, BinanceAPIException
 |  
 |  ggeett__sseerrvveerr__ttiimmee(self) -> Dict
 |      Test connectivity to the Rest API and get the current server time.
 |      
 |      https://github.com/binance/binance-spot-api-docs/blob/master/rest-api.md#check-server-time
 |      
 |      :returns: Current server time
 |      
 |      .. code-block:: python
 |      
 |          {
 |              "serverTime": 1499827319559
 |          }
 |      
 |      :raises: BinanceRequestException, BinanceAPIException
 |  
 |  ggeett__ssuubb__aaccccoouunntt__aasssseettss(self, **params)
 |      Fetch sub-account assets
 |      
 |      https://binance-docs.github.io/apidocs/spot/en/#query-sub-account-assets-sapi-for-master-account
 |      
 |      :param email: required
 |      :type email: str
 |      :param recvWindow: optional
 |      :type recvWindow: int
 |      
 |      :returns: API response
 |      
 |      .. code-block:: python
 |      
 |          {
 |              "balances":[
 |                  {
 |                      "asset":"ADA",
 |                      "free":10000,
 |                      "locked":0
 |                  },
 |                  {
 |                      "asset":"BNB",
 |                      "free":10003,
 |                      "locked":0
 |                  },
 |                  {
 |                      "asset":"BTC",
 |                      "free":11467.6399,
 |                      "locked":0
 |                  },
 |                  {
 |                      "asset":"ETH",
 |                      "free":10004.995,
 |                      "locked":0
 |                  },
 |                  {
 |                      "asset":"USDT",
 |                      "free":11652.14213,
 |                      "locked":0
 |                  }
 |              ]
 |          }
 |      
 |      :raises: BinanceRequestException, BinanceAPIException
 |  
 |  ggeett__ssuubb__aaccccoouunntt__ffuuttuurreess__ttrraannssffeerr__hhiissttoorryy(self, **params)
 |      Query Sub-account Futures Transfer History.
 |      
 |      https://binance-docs.github.io/apidocs/spot/en/#query-sub-account-futures-asset-transfer-history-for-master-account
 |      
 |      :param email: required
 |      :type email: str
 |      :param futuresType: required
 |      :type futuresType: int
 |      :param startTime: optional
 |      :type startTime: int
 |      :param endTime: optional
 |      :type endTime: int
 |      :param page: optional
 |      :type page: int
 |      :param limit: optional
 |      :type limit: int
 |      :param recvWindow: optional
 |      :type recvWindow: int
 |      
 |      :returns: API response
 |      
 |      .. code-block:: python
 |      
 |          {
 |              "success":true,
 |              "futuresType": 2,
 |              "transfers":[
 |                  {
 |                      "from":"aaa@test.com",
 |                      "to":"bbb@test.com",
 |                      "asset":"BTC",
 |                      "qty":"1",
 |                      "time":1544433328000
 |                  },
 |                  {
 |                      "from":"bbb@test.com",
 |                      "to":"ccc@test.com",
 |                      "asset":"ETH",
 |                      "qty":"2",
 |                      "time":1544433328000
 |                  }
 |              ]
 |          }
 |      
 |      :raises: BinanceRequestException, BinanceAPIException
 |  
 |  ggeett__ssuubb__aaccccoouunntt__lliisstt(self, **params)
 |      Query Sub-account List.
 |      
 |      https://binance-docs.github.io/apidocs/spot/en/#query-sub-account-list-sapi-for-master-account
 |      
 |      :param email: optional - Sub-account email
 |      :type email: str
 |      :param isFreeze: optional
 |      :type isFreeze: str
 |      :param page: optional - Default value: 1
 |      :type page: int
 |      :param limit: optional - Default value: 1, Max value: 200
 |      :type limit: int
 |      :param recvWindow: optional
 |      :type recvWindow: int
 |      
 |      :returns: API response
 |      
 |      .. code-block:: python
 |      
 |          {
 |              "subAccounts":[
 |                  {
 |                      "email":"testsub@gmail.com",
 |                      "isFreeze":false,
 |                      "createTime":1544433328000
 |                  },
 |                  {
 |                      "email":"virtual@oxebmvfonoemail.com",
 |                      "isFreeze":false,
 |                      "createTime":1544433328000
 |                  }
 |              ]
 |          }
 |      
 |      :raises: BinanceRequestException, BinanceAPIException
 |  
 |  ggeett__ssuubb__aaccccoouunntt__ttrraannssffeerr__hhiissttoorryy(self, **params)
 |      Query Sub-account Transfer History.
 |      
 |      https://binance-docs.github.io/apidocs/spot/en/#query-sub-account-spot-asset-transfer-history-sapi-for-master-account
 |      
 |      :param fromEmail: optional
 |      :type fromEmail: str
 |      :param toEmail: optional
 |      :type toEmail: str
 |      :param startTime: optional
 |      :type startTime: int
 |      :param endTime: optional
 |      :type endTime: int
 |      :param page: optional - Default value: 1
 |      :type page: int
 |      :param limit: optional - Default value: 500
 |      :type limit: int
 |      :param recvWindow: optional
 |      :type recvWindow: int
 |      
 |      :returns: API response
 |      
 |      .. code-block:: python
 |      
 |          [
 |              {
 |                  "from":"aaa@test.com",
 |                  "to":"bbb@test.com",
 |                  "asset":"BTC",
 |                  "qty":"10",
 |                  "status": "SUCCESS",
 |                  "tranId": 6489943656,
 |                  "time":1544433328000
 |              },
 |              {
 |                  "from":"bbb@test.com",
 |                  "to":"ccc@test.com",
 |                  "asset":"ETH",
 |                  "qty":"2",
 |                  "status": "SUCCESS",
 |                  "tranId": 6489938713,
 |                  "time":1544433328000
 |              }
 |          ]
 |      
 |      :raises: BinanceRequestException, BinanceAPIException
 |  
 |  ggeett__ssuubbaaccccoouunntt__ddeeppoossiitt__aaddddrreessss(self, **params)
 |      Get Sub-account Deposit Address (For Master Account)
 |      
 |      https://binance-docs.github.io/apidocs/spot/en/#get-sub-account-deposit-address-for-master-account
 |      
 |      :param email: required - Sub account email
 |      :type email: str
 |      :param coin: required
 |      :type coin: str
 |      :param network: optional
 |      :type network: str
 |      :param recvWindow: optional
 |      :type recvWindow: int
 |      
 |      :returns: API response
 |      
 |      .. code-block:: python
 |      
 |         {
 |              "address":"TDunhSa7jkTNuKrusUTU1MUHtqXoBPKETV",
 |              "coin":"USDT",
 |              "tag":"",
 |              "url":"https://tronscan.org/#/address/TDunhSa7jkTNuKrusUTU1MUHtqXoBPKETV"
 |          }
 |      
 |      :raises: BinanceRequestException, BinanceAPIException
 |  
 |  ggeett__ssuubbaaccccoouunntt__ddeeppoossiitt__hhiissttoorryy(self, **params)
 |      Get Sub-account Deposit History (For Master Account)
 |      
 |      https://binance-docs.github.io/apidocs/spot/en/#get-sub-account-deposit-address-for-master-account
 |      
 |      :param email: required - Sub account email
 |      :type email: str
 |      :param coin: optional
 |      :type coin: str
 |      :param status: optional - (0:pending,6: credited but cannot withdraw, 1:success)
 |      :type status: int
 |      :param startTime: optional
 |      :type startTime: int
 |      :param endTime: optional
 |      :type endTime: int
 |      :param limit: optional
 |      :type limit: int
 |      :param offset: optional - default:0
 |      :type offset: int
 |      :param recvWindow: optional
 |      :type recvWindow: int
 |      
 |      :returns: API response
 |      
 |      .. code-block:: python
 |      
 |         [
 |              {
 |                  "amount":"0.00999800",
 |                  "coin":"PAXG",
 |                  "network":"ETH",
 |                  "status":1,
 |                  "address":"0x788cabe9236ce061e5a892e1a59395a81fc8d62c",
 |                  "addressTag":"",
 |                  "txId":"0xaad4654a3234aa6118af9b4b335f5ae81c360b2394721c019b5d1e75328b09f3",
 |                  "insertTime":1599621997000,
 |                  "transferType":0,
 |                  "confirmTimes":"12/12"
 |              },
 |              {
 |                  "amount":"0.50000000",
 |                  "coin":"IOTA",
 |                  "network":"IOTA",
 |                  "status":1,
 |                  "address":"SIZ9VLMHWATXKV99LH99CIGFJFUMLEHGWVZVNNZXRJJVWBPHYWPPBOSDORZ9EQSHCZAMPVAPGFYQAUUV9DROOXJLNW",
 |                  "addressTag":"",
 |                  "txId":"ESBFVQUTPIWQNJSPXFNHNYHSQNTGKRVKPRABQWTAXCDWOAKDKYWPTVG9BGXNVNKTLEJGESAVXIKIZ9999",
 |                  "insertTime":1599620082000,
 |                  "transferType":0,
 |                  "confirmTimes":"1/1"
 |              }
 |         ]
 |      
 |      :raises: BinanceRequestException, BinanceAPIException
 |  
 |  ggeett__ssuubbaaccccoouunntt__ffuuttuurreess__ddeettaaiillss(self, **params)
 |      Get Detail on Sub-account's Futures Account (For Master Account)
 |      
 |      https://binance-docs.github.io/apidocs/spot/en/#get-detail-on-sub-account-39-s-futures-account-for-master-account
 |      
 |      :param email: required - Sub account email
 |      :type email: str
 |      :param recvWindow: optional
 |      :type recvWindow: int
 |      
 |      :returns: API response
 |      
 |      .. code-block:: python
 |      
 |          {
 |              "email": "abc@test.com",
 |              "asset": "USDT",
 |              "assets":[
 |                  {
 |                      "asset": "USDT",
 |                      "initialMargin": "0.00000000",
 |                      "maintenanceMargin": "0.00000000",
 |                      "marginBalance": "0.88308000",
 |                      "maxWithdrawAmount": "0.88308000",
 |                      "openOrderInitialMargin": "0.00000000",
 |                      "positionInitialMargin": "0.00000000",
 |                      "unrealizedProfit": "0.00000000",
 |                      "walletBalance": "0.88308000"
 |                   }
 |              ],
 |              "canDeposit": true,
 |              "canTrade": true,
 |              "canWithdraw": true,
 |              "feeTier": 2,
 |              "maxWithdrawAmount": "0.88308000",
 |              "totalInitialMargin": "0.00000000",
 |              "totalMaintenanceMargin": "0.00000000",
 |              "totalMarginBalance": "0.88308000",
 |              "totalOpenOrderInitialMargin": "0.00000000",
 |              "totalPositionInitialMargin": "0.00000000",
 |              "totalUnrealizedProfit": "0.00000000",
 |              "totalWalletBalance": "0.88308000",
 |              "updateTime": 1576756674610
 |          }
 |      
 |      :raises: BinanceRequestException, BinanceAPIException
 |  
 |  ggeett__ssuubbaaccccoouunntt__ffuuttuurreess__mmaarrggiinn__ssttaattuuss(self, **params)
 |      Get Sub-account's Status on Margin/Futures (For Master Account)
 |      
 |      https://binance-docs.github.io/apidocs/spot/en/#get-sub-account-39-s-status-on-margin-futures-for-master-account
 |      
 |      :param email: optional - Sub account email
 |      :type email: str
 |      :param recvWindow: optional
 |      :type recvWindow: int
 |      
 |      :returns: API response
 |      
 |      .. code-block:: python
 |      
 |         [
 |              {
 |                  "email":"123@test.com",      // user email
 |                  "isSubUserEnabled": true,    // true or false
 |                  "isUserActive": true,        // true or false
 |                  "insertTime": 1570791523523  // sub account create time
 |                  "isMarginEnabled": true,     // true or false for margin
 |                  "isFutureEnabled": true      // true or false for futures.
 |                  "mobile": 1570791523523      // user mobile number
 |              }
 |          ]
 |      
 |      :raises: BinanceRequestException, BinanceAPIException
 |  
 |  ggeett__ssuubbaaccccoouunntt__ffuuttuurreess__ppoossiittiioonnrriisskk(self, **params)
 |      Get Futures Position-Risk of Sub-account (For Master Account)
 |      
 |      https://binance-docs.github.io/apidocs/spot/en/#get-futures-position-risk-of-sub-account-for-master-account
 |      
 |      :param email: required - Sub account email
 |      :type email: str
 |      :param recvWindow: optional
 |      :type recvWindow: int
 |      
 |      :returns: API response
 |      
 |      .. code-block:: python
 |      
 |          [
 |              {
 |                  "entryPrice": "9975.12000",
 |                  "leverage": "50",              // current initial leverage
 |                  "maxNotional": "1000000",      // notional value limit of current initial leverage
 |                  "liquidationPrice": "7963.54",
 |                  "markPrice": "9973.50770517",
 |                  "positionAmount": "0.010",
 |                  "symbol": "BTCUSDT",
 |                  "unrealizedProfit": "-0.01612295"
 |              }
 |          ]
 |      
 |      :raises: BinanceRequestException, BinanceAPIException
 |  
 |  ggeett__ssuubbaaccccoouunntt__ffuuttuurreess__ssuummmmaarryy(self, **params)
 |      Get Summary of Sub-account's Futures Account (For Master Account)
 |      
 |      https://binance-docs.github.io/apidocs/spot/en/#get-summary-of-sub-account-39-s-futures-account-for-master-account
 |      
 |      :param recvWindow: optional
 |      :type recvWindow: int
 |      
 |      :returns: API response
 |      
 |      .. code-block:: python
 |      
 |          {
 |              "totalInitialMargin": "9.83137400",
 |              "totalMaintenanceMargin": "0.41568700",
 |              "totalMarginBalance": "23.03235621",
 |              "totalOpenOrderInitialMargin": "9.00000000",
 |              "totalPositionInitialMargin": "0.83137400",
 |              "totalUnrealizedProfit": "0.03219710",
 |              "totalWalletBalance": "22.15879444",
 |              "asset": "USDT",
 |              "subAccountList":[
 |                  {
 |                      "email": "123@test.com",
 |                      "totalInitialMargin": "9.00000000",
 |                      "totalMaintenanceMargin": "0.00000000",
 |                      "totalMarginBalance": "22.12659734",
 |                      "totalOpenOrderInitialMargin": "9.00000000",
 |                      "totalPositionInitialMargin": "0.00000000",
 |                      "totalUnrealizedProfit": "0.00000000",
 |                      "totalWalletBalance": "22.12659734",
 |                      "asset": "USDT"
 |                  },
 |                  {
 |                      "email": "345@test.com",
 |                      "totalInitialMargin": "0.83137400",
 |                      "totalMaintenanceMargin": "0.41568700",
 |                      "totalMarginBalance": "0.90575887",
 |                      "totalOpenOrderInitialMargin": "0.00000000",
 |                      "totalPositionInitialMargin": "0.83137400",
 |                      "totalUnrealizedProfit": "0.03219710",
 |                      "totalWalletBalance": "0.87356177",
 |                      "asset": "USDT"
 |                  }
 |              ]
 |          }
 |      
 |      :raises: BinanceRequestException, BinanceAPIException
 |  
 |  ggeett__ssuubbaaccccoouunntt__mmaarrggiinn__ddeettaaiillss(self, **params)
 |      Get Detail on Sub-account's Margin Account (For Master Account)
 |      
 |      https://binance-docs.github.io/apidocs/spot/en/#get-detail-on-sub-account-39-s-margin-account-for-master-account
 |      
 |      :param email: required - Sub account email
 |      :type email: str
 |      :param recvWindow: optional
 |      :type recvWindow: int
 |      
 |      :returns: API response
 |      
 |      .. code-block:: python
 |      
 |          {
 |                "email":"123@test.com",
 |                "marginLevel": "11.64405625",
 |                "totalAssetOfBtc": "6.82728457",
 |                "totalLiabilityOfBtc": "0.58633215",
 |                "totalNetAssetOfBtc": "6.24095242",
 |                "marginTradeCoeffVo":
 |                      {
 |                          "forceLiquidationBar": "1.10000000",  // Liquidation margin ratio
 |                          "marginCallBar": "1.50000000",        // Margin call margin ratio
 |                          "normalBar": "2.00000000"             // Initial margin ratio
 |                      },
 |                "marginUserAssetVoList": [
 |                    {
 |                        "asset": "BTC",
 |                        "borrowed": "0.00000000",
 |                        "free": "0.00499500",
 |                        "interest": "0.00000000",
 |                        "locked": "0.00000000",
 |                        "netAsset": "0.00499500"
 |                    },
 |                    {
 |                        "asset": "BNB",
 |                        "borrowed": "201.66666672",
 |                        "free": "2346.50000000",
 |                        "interest": "0.00000000",
 |                        "locked": "0.00000000",
 |                        "netAsset": "2144.83333328"
 |                    },
 |                    {
 |                        "asset": "ETH",
 |                        "borrowed": "0.00000000",
 |                        "free": "0.00000000",
 |                        "interest": "0.00000000",
 |                        "locked": "0.00000000",
 |                        "netAsset": "0.00000000"
 |                    },
 |                    {
 |                        "asset": "USDT",
 |                        "borrowed": "0.00000000",
 |                        "free": "0.00000000",
 |                        "interest": "0.00000000",
 |                        "locked": "0.00000000",
 |                        "netAsset": "0.00000000"
 |                    }
 |                ]
 |          }
 |      
 |      :raises: BinanceRequestException, BinanceAPIException
 |  
 |  ggeett__ssuubbaaccccoouunntt__mmaarrggiinn__ssuummmmaarryy(self, **params)
 |      Get Summary of Sub-account's Margin Account (For Master Account)
 |      
 |      https://binance-docs.github.io/apidocs/spot/en/#get-summary-of-sub-account-39-s-margin-account-for-master-account
 |      
 |      :param recvWindow: optional
 |      :type recvWindow: int
 |      
 |      :returns: API response
 |      
 |      .. code-block:: python
 |      
 |          {
 |              "totalAssetOfBtc": "4.33333333",
 |              "totalLiabilityOfBtc": "2.11111112",
 |              "totalNetAssetOfBtc": "2.22222221",
 |              "subAccountList":[
 |                  {
 |                      "email":"123@test.com",
 |                      "totalAssetOfBtc": "2.11111111",
 |                      "totalLiabilityOfBtc": "1.11111111",
 |                      "totalNetAssetOfBtc": "1.00000000"
 |                  },
 |                  {
 |                      "email":"345@test.com",
 |                      "totalAssetOfBtc": "2.22222222",
 |                      "totalLiabilityOfBtc": "1.00000001",
 |                      "totalNetAssetOfBtc": "1.22222221"
 |                  }
 |              ]
 |          }
 |      
 |      :raises: BinanceRequestException, BinanceAPIException
 |  
 |  ggeett__ssuubbaaccccoouunntt__ttrraannssffeerr__hhiissttoorryy(self, **params)
 |      Sub-account Transfer History (For Sub-account)
 |      
 |      https://binance-docs.github.io/apidocs/spot/en/#transfer-to-master-for-sub-account
 |      
 |      :param asset: required - The asset being transferred, e.g., USDT
 |      :type asset: str
 |      :param type: optional - 1: transfer in, 2: transfer out
 |      :type type: int
 |      :param startTime: optional
 |      :type startTime: int
 |      :param endTime: optional
 |      :type endTime: int
 |      :param limit: optional - Default 500
 |      :type limit: int
 |      :param recvWindow: optional
 |      :type recvWindow: int
 |      
 |      :returns: API response
 |      
 |      .. code-block:: python
 |      
 |          [
 |            {
 |              "counterParty":"master",
 |              "email":"master@test.com",
 |              "type":1,  // 1 for transfer in, 2 for transfer out
 |              "asset":"BTC",
 |              "qty":"1",
 |              "status":"SUCCESS",
 |              "tranId":11798835829,
 |              "time":1544433325000
 |            },
 |            {
 |              "counterParty":"subAccount",
 |              "email":"sub2@test.com",
 |              "type":2,
 |              "asset":"ETH",
 |              "qty":"2",
 |              "status":"SUCCESS",
 |              "tranId":11798829519,
 |              "time":1544433326000
 |            }
 |          ]
 |      
 |      :raises: BinanceRequestException, BinanceAPIException
 |  
 |  ggeett__ssyymmbbooll__iinnffoo(self, symbol) -> Union[Dict, NoneType]
 |      Return information about a symbol
 |      
 |      :param symbol: required e.g BNBBTC
 |      :type symbol: str
 |      
 |      :returns: Dict if found, None if not
 |      
 |      .. code-block:: python
 |      
 |          {
 |              "symbol": "ETHBTC",
 |              "status": "TRADING",
 |              "baseAsset": "ETH",
 |              "baseAssetPrecision": 8,
 |              "quoteAsset": "BTC",
 |              "quotePrecision": 8,
 |              "orderTypes": ["LIMIT", "MARKET"],
 |              "icebergAllowed": false,
 |              "filters": [
 |                  {
 |                      "filterType": "PRICE_FILTER",
 |                      "minPrice": "0.00000100",
 |                      "maxPrice": "100000.00000000",
 |                      "tickSize": "0.00000100"
 |                  }, {
 |                      "filterType": "LOT_SIZE",
 |                      "minQty": "0.00100000",
 |                      "maxQty": "100000.00000000",
 |                      "stepSize": "0.00100000"
 |                  }, {
 |                      "filterType": "MIN_NOTIONAL",
 |                      "minNotional": "0.00100000"
 |                  }
 |              ]
 |          }
 |      
 |      :raises: BinanceRequestException, BinanceAPIException
 |  
 |  ggeett__ssyymmbbooll__ttiicckkeerr(self, **params)
 |      Latest price for a symbol or symbols.
 |      
 |      https://github.com/binance/binance-spot-api-docs/blob/master/rest-api.md#24hr-ticker-price-change-statistics
 |      
 |      :param symbol:
 |      :type symbol: str
 |      
 |      :returns: API response
 |      
 |      .. code-block:: python
 |      
 |          {
 |              "symbol": "LTCBTC",
 |              "price": "4.00000200"
 |          }
 |      
 |      OR
 |      
 |      .. code-block:: python
 |      
 |          [
 |              {
 |                  "symbol": "LTCBTC",
 |                  "price": "4.00000200"
 |              },
 |              {
 |                  "symbol": "ETHBTC",
 |                  "price": "0.07946600"
 |              }
 |          ]
 |      
 |      :raises: BinanceRequestException, BinanceAPIException
 |  
 |  ggeett__ssyysstteemm__ssttaattuuss(self)
 |      Get system status detail.
 |      
 |      https://binance-docs.github.io/apidocs/spot/en/#system-status-sapi-system
 |      
 |      :returns: API response
 |      
 |      .. code-block:: python
 |      
 |          {
 |              "status": 0,        # 0: normalï¼Œ1ï¼šsystem maintenance
 |              "msg": "normal"     # normal or System maintenance.
 |          }
 |      
 |      :raises: BinanceAPIException
 |  
 |  ggeett__ttiicckkeerr(self, **params)
 |      24 hour price change statistics.
 |      
 |      https://github.com/binance/binance-spot-api-docs/blob/master/rest-api.md#24hr-ticker-price-change-statistics
 |      
 |      :param symbol:
 |      :type symbol: str
 |      
 |      :returns: API response
 |      
 |      .. code-block:: python
 |      
 |          {
 |              "priceChange": "-94.99999800",
 |              "priceChangePercent": "-95.960",
 |              "weightedAvgPrice": "0.29628482",
 |              "prevClosePrice": "0.10002000",
 |              "lastPrice": "4.00000200",
 |              "bidPrice": "4.00000000",
 |              "askPrice": "4.00000200",
 |              "openPrice": "99.00000000",
 |              "highPrice": "100.00000000",
 |              "lowPrice": "0.10000000",
 |              "volume": "8913.30000000",
 |              "openTime": 1499783499040,
 |              "closeTime": 1499869899040,
 |              "fristId": 28385,   # First tradeId
 |              "lastId": 28460,    # Last tradeId
 |              "count": 76         # Trade count
 |          }
 |      
 |      OR
 |      
 |      .. code-block:: python
 |      
 |          [
 |              {
 |                  "priceChange": "-94.99999800",
 |                  "priceChangePercent": "-95.960",
 |                  "weightedAvgPrice": "0.29628482",
 |                  "prevClosePrice": "0.10002000",
 |                  "lastPrice": "4.00000200",
 |                  "bidPrice": "4.00000000",
 |                  "askPrice": "4.00000200",
 |                  "openPrice": "99.00000000",
 |                  "highPrice": "100.00000000",
 |                  "lowPrice": "0.10000000",
 |                  "volume": "8913.30000000",
 |                  "openTime": 1499783499040,
 |                  "closeTime": 1499869899040,
 |                  "fristId": 28385,   # First tradeId
 |                  "lastId": 28460,    # Last tradeId
 |                  "count": 76         # Trade count
 |              }
 |          ]
 |      
 |      :raises: BinanceRequestException, BinanceAPIException
 |  
 |  ggeett__ttrraaddee__ffeeee(self, **params)
 |      Get trade fee.
 |      
 |      https://binance-docs.github.io/apidocs/spot/en/#trade-fee-sapi-user_data
 |      
 |      :param symbol: optional
 |      :type symbol: str
 |      :param recvWindow: the number of milliseconds the request is valid for
 |      :type recvWindow: int
 |      
 |      :returns: API response
 |      
 |      .. code-block:: python
 |      
 |          [
 |              {
 |                  "symbol": "ADABNB",
 |                  "makerCommission": "0.001",
 |                  "takerCommission": "0.001"
 |              },
 |              {
 |                  "symbol": "BNBBTC",
 |                  "makerCommission": "0.001",
 |                  "takerCommission": "0.001"
 |              }
 |          ]
 |      
 |      :raises: BinanceWithdrawException
 |  
 |  ggeett__uunniivveerrssaall__ttrraannssffeerr__hhiissttoorryy(self, **params)
 |      Universal Transfer (For Master Account)
 |      
 |      https://binance-docs.github.io/apidocs/spot/en/#query-universal-transfer-history
 |      
 |      :param fromEmail: optional
 |      :type fromEmail: str
 |      :param toEmail: optional
 |      :type toEmail: str
 |      :param startTime: optional
 |      :type startTime: int
 |      :param endTime: optional
 |      :type endTime: int
 |      :param page: optional
 |      :type page: int
 |      :param limit: optional
 |      :type limit: int
 |      :param recvWindow: optional
 |      :type recvWindow: int
 |      
 |      :returns: API response
 |      
 |      .. code-block:: python
 |      
 |          [
 |            {
 |              "tranId":11945860693,
 |              "fromEmail":"master@test.com",
 |              "toEmail":"subaccount1@test.com",
 |              "asset":"BTC",
 |              "amount":"0.1",
 |              "fromAccountType":"SPOT",
 |              "toAccountType":"COIN_FUTURE",
 |              "status":"SUCCESS",
 |              "createTimeStamp":1544433325000
 |            },
 |            {
 |              "tranId":11945857955,
 |              "fromEmail":"master@test.com",
 |              "toEmail":"subaccount2@test.com",
 |              "asset":"ETH",
 |              "amount":"0.2",
 |              "fromAccountType":"SPOT",
 |              "toAccountType":"USDT_FUTURE",
 |              "status":"SUCCESS",
 |              "createTimeStamp":1544433326000
 |            }
 |          ]
 |      
 |      :raises: BinanceRequestException, BinanceAPIException
 |  
 |  ggeett__wwiitthhddrraaww__hhiissttoorryy(self, **params)
 |      Fetch withdraw history.
 |      
 |      https://binance-docs.github.io/apidocs/spot/en/#withdraw-history-supporting-network-user_data
 |      
 |      :param coin: optional
 |      :type coin: str
 |      :type status: 0(0:Email Sent,1:Cancelled 2:Awaiting Approval 3:Rejected 4:Processing 5:Failure 6Completed) optional
 |      :type status: int
 |      :param offset: optional - default:0
 |      :type offset: int
 |      :param limit: optional
 |      :type limit: int
 |      :param startTime: optional - Default: 90 days from current timestamp
 |      :type startTime: int
 |      :param endTime: optional - Default: present timestamp
 |      :type endTime: int
 |      :param recvWindow: the number of milliseconds the request is valid for
 |      :type recvWindow: int
 |      
 |      :returns: API response
 |      
 |      .. code-block:: python
 |      
 |          [
 |              {
 |                  "address": "0x94df8b352de7f46f64b01d3666bf6e936e44ce60",
 |                  "amount": "8.91000000",
 |                  "applyTime": "2019-10-12 11:12:02",
 |                  "coin": "USDT",
 |                  "id": "b6ae22b3aa844210a7041aee7589627c",
 |                  "withdrawOrderId": "WITHDRAWtest123", // will not be returned if there's no withdrawOrderId for this withdraw.
 |                  "network": "ETH",
 |                  "transferType": 0,   // 1 for internal transfer, 0 for external transfer
 |                  "status": 6,
 |                  "txId": "0xb5ef8c13b968a406cc62a93a8bd80f9e9a906ef1b3fcf20a2e48573c17659268"
 |              },
 |              {
 |                  "address": "1FZdVHtiBqMrWdjPyRPULCUceZPJ2WLCsB",
 |                  "amount": "0.00150000",
 |                  "applyTime": "2019-09-24 12:43:45",
 |                  "coin": "BTC",
 |                  "id": "156ec387f49b41df8724fa744fa82719",
 |                  "network": "BTC",
 |                  "status": 6,
 |                  "txId": "60fd9007ebfddc753455f95fafa808c4302c836e4d1eebc5a132c36c1d8ac354"
 |              }
 |          ]
 |      
 |      :raises: BinanceRequestException, BinanceAPIException
 |  
 |  ggeett__wwiitthhddrraaww__hhiissttoorryy__iidd(self, withdraw_id, **params)
 |      Fetch withdraw history.
 |      
 |      https://binance-docs.github.io/apidocs/spot/en/#withdraw-history-supporting-network-user_data
 |      
 |      :param withdraw_id: required
 |      :type withdraw_id: str
 |      :param asset: optional
 |      :type asset: str
 |      :type status: 0(0:Email Sent,1:Cancelled 2:Awaiting Approval 3:Rejected 4:Processing 5:Failure 6Completed) optional
 |      :type status: int
 |      :param startTime: optional
 |      :type startTime: long
 |      :param endTime: optional
 |      :type endTime: long
 |      :param recvWindow: the number of milliseconds the request is valid for
 |      :type recvWindow: int
 |      
 |      :returns: API response
 |      
 |      .. code-block:: python
 |      
 |          {
 |              "id":"7213fea8e94b4a5593d507237e5a555b",
 |              "withdrawOrderId": None,
 |              "amount": 0.99,
 |              "transactionFee": 0.01,
 |              "address": "0x6915f16f8791d0a1cc2bf47c13a6b2a92000504b",
 |              "asset": "ETH",
 |              "txId": "0xdf33b22bdb2b28b1f75ccd201a4a4m6e7g83jy5fc5d5a9d1340961598cfcb0a1",
 |              "applyTime": 1508198532000,
 |              "status": 4
 |          }
 |      
 |      :raises: BinanceRequestException, BinanceAPIException
 |  
 |  iissoollaatteedd__mmaarrggiinn__ssttrreeaamm__cclloossee(self, symbol, listenKey)
 |      Close out an isolated margin data stream.
 |      
 |      https://binance-docs.github.io/apidocs/spot/en/#listen-key-isolated-margin
 |      
 |      :param symbol: required - symbol for the isolated margin account
 |      :type symbol: str
 |      :param listenKey: required
 |      :type listenKey: str
 |      
 |      :returns: API response
 |      
 |      .. code-block:: python
 |      
 |          {}
 |      
 |      :raises: BinanceRequestException, BinanceAPIException
 |  
 |  iissoollaatteedd__mmaarrggiinn__ssttrreeaamm__ggeett__lliisstteenn__kkeeyy(self, symbol)
 |      Start a new isolated margin data stream and return the listen key
 |      If a stream already exists it should return the same key.
 |      If the stream becomes invalid a new key is returned.
 |      
 |      Can be used to keep the stream alive.
 |      
 |      https://binance-docs.github.io/apidocs/spot/en/#listen-key-isolated-margin
 |      
 |      :param symbol: required - symbol for the isolated margin account
 |      :type symbol: str
 |      
 |      :returns: API response
 |      
 |      .. code-block:: python
 |      
 |          {
 |              "listenKey":  "T3ee22BIYuWqmvne0HNq2A2WsFlEtLhvWCtItw6ffhhdmjifQ2tRbuKkTHhr"
 |          }
 |      
 |      :raises: BinanceRequestException, BinanceAPIException
 |  
 |  iissoollaatteedd__mmaarrggiinn__ssttrreeaamm__kkeeeeppaalliivvee(self, symbol, listenKey)
 |      PING an isolated margin data stream to prevent a time out.
 |      
 |      https://binance-docs.github.io/apidocs/spot/en/#listen-key-isolated-margin
 |      
 |      :param symbol: required - symbol for the isolated margin account
 |      :type symbol: str
 |      :param listenKey: required
 |      :type listenKey: str
 |      
 |      :returns: API response
 |      
 |      .. code-block:: python
 |      
 |          {}
 |      
 |      :raises: BinanceRequestException, BinanceAPIException
 |  
 |  mmaakkee__ssuubbaaccccoouunntt__ffuuttuurreess__ttrraannssffeerr(self, **params)
 |      Futures Transfer for Sub-account (For Master Account)
 |      
 |      https://binance-docs.github.io/apidocs/spot/en/#futures-transfer-for-sub-account-for-master-account
 |      
 |      :param email: required - Sub account email
 |      :type email: str
 |      :param asset: required - The asset being transferred, e.g., USDT
 |      :type asset: str
 |      :param amount: required - The amount to be transferred
 |      :type amount: float
 |      :param type: required - 1: transfer from subaccount's spot account to its USDT-margined futures account
 |                              2: transfer from subaccount's USDT-margined futures account to its spot account
 |                              3: transfer from subaccount's spot account to its COIN-margined futures account
 |                              4: transfer from subaccount's COIN-margined futures account to its spot account
 |      :type type: int
 |      
 |      :returns: API response
 |      
 |      .. code-block:: python
 |      
 |          {
 |              "txnId":"2966662589"
 |          }
 |      
 |      :raises: BinanceRequestException, BinanceAPIException
 |  
 |  mmaakkee__ssuubbaaccccoouunntt__mmaarrggiinn__ttrraannssffeerr(self, **params)
 |      Margin Transfer for Sub-account (For Master Account)
 |      
 |      https://binance-docs.github.io/apidocs/spot/en/#margin-transfer-for-sub-account-for-master-account
 |      
 |      :param email: required - Sub account email
 |      :type email: str
 |      :param asset: required - The asset being transferred, e.g., USDT
 |      :type asset: str
 |      :param amount: required - The amount to be transferred
 |      :type amount: float
 |      :param type: required - 1: transfer from subaccount's spot account to margin account
 |                              2: transfer from subaccount's margin account to its spot account
 |      :type type: int
 |      
 |      :returns: API response
 |      
 |      .. code-block:: python
 |      
 |          {
 |              "txnId":"2966662589"
 |          }
 |      
 |      :raises: BinanceRequestException, BinanceAPIException
 |  
 |  mmaakkee__ssuubbaaccccoouunntt__ttoo__mmaasstteerr__ttrraannssffeerr(self, **params)
 |      Transfer to Master (For Sub-account)
 |      
 |      https://binance-docs.github.io/apidocs/spot/en/#transfer-to-master-for-sub-account
 |      
 |      :param asset: required - The asset being transferred, e.g., USDT
 |      :type asset: str
 |      :param amount: required - The amount to be transferred
 |      :type amount: float
 |      :param recvWindow: optional
 |      :type recvWindow: int
 |      
 |      :returns: API response
 |      
 |      .. code-block:: python
 |      
 |          {
 |              "txnId":"2966662589"
 |          }
 |      
 |      :raises: BinanceRequestException, BinanceAPIException
 |  
 |  mmaakkee__ssuubbaaccccoouunntt__ttoo__ssuubbaaccccoouunntt__ttrraannssffeerr(self, **params)
 |      Transfer to Sub-account of Same Master (For Sub-account)
 |      
 |      https://binance-docs.github.io/apidocs/spot/en/#transfer-to-sub-account-of-same-master-for-sub-account
 |      
 |      :param toEmail: required - Sub account email
 |      :type toEmail: str
 |      :param asset: required - The asset being transferred, e.g., USDT
 |      :type asset: str
 |      :param amount: required - The amount to be transferred
 |      :type amount: float
 |      :param recvWindow: optional
 |      :type recvWindow: int
 |      
 |      :returns: API response
 |      
 |      .. code-block:: python
 |      
 |          {
 |              "txnId":"2966662589"
 |          }
 |      
 |      :raises: BinanceRequestException, BinanceAPIException
 |  
 |  mmaakkee__ssuubbaaccccoouunntt__uunniivveerrssaall__ttrraannssffeerr(self, **params)
 |      Universal Transfer (For Master Account)
 |      
 |      https://binance-docs.github.io/apidocs/spot/en/#universal-transfer-for-master-account
 |      
 |      :param fromEmail: optional
 |      :type fromEmail: str
 |      :param toEmail: optional
 |      :type toEmail: str
 |      :param fromAccountType: required - "SPOT","USDT_FUTURE","COIN_FUTURE"
 |      :type fromAccountType: str
 |      :param toAccountType: required - "SPOT","USDT_FUTURE","COIN_FUTURE"
 |      :type toAccountType: str
 |      :param asset: required - The asset being transferred, e.g., USDT
 |      :type asset: str
 |      :param amount: required
 |      :type amount: float
 |      :param recvWindow: optional
 |      :type recvWindow: int
 |      
 |      :returns: API response
 |      
 |      .. code-block:: python
 |      
 |          {
 |              "tranId":11945860693
 |          }
 |      
 |      :raises: BinanceRequestException, BinanceAPIException
 |  
 |  mmaakkee__uunniivveerrssaall__ttrraannssffeerr(self, **params)
 |      User Universal Transfer
 |      
 |      https://binance-docs.github.io/apidocs/spot/en/#user-universal-transfer
 |      
 |      :param type: required
 |      :type type: str (ENUM)
 |      :param asset: required
 |      :type asset: str
 |      :param amount: required
 |      :type amount: str
 |      :param recvWindow: the number of milliseconds the request is valid for
 |      :type recvWindow: int
 |      
 |      .. code:: python
 |      
 |          transfer_status = client.make_universal_transfer(params)
 |      
 |      :returns: API response
 |      
 |      .. code-block:: python
 |      
 |          {
 |              "tranId":13526853623
 |          }
 |      
 |      
 |      :raises: BinanceRequestException, BinanceAPIException
 |  
 |  mmaarrggiinn__ssttrreeaamm__cclloossee(self, listenKey)
 |      Close out a cross-margin data stream.
 |      
 |      https://binance-docs.github.io/apidocs/spot/en/#listen-key-margin
 |      
 |      :param listenKey: required
 |      :type listenKey: str
 |      
 |      :returns: API response
 |      
 |      .. code-block:: python
 |      
 |          {}
 |      
 |      :raises: BinanceRequestException, BinanceAPIException
 |  
 |  mmaarrggiinn__ssttrreeaamm__ggeett__lliisstteenn__kkeeyy(self)
 |      Start a new cross-margin data stream and return the listen key
 |      If a stream already exists it should return the same key.
 |      If the stream becomes invalid a new key is returned.
 |      
 |      Can be used to keep the stream alive.
 |      
 |      https://binance-docs.github.io/apidocs/spot/en/#listen-key-margin
 |      
 |      :returns: API response
 |      
 |      .. code-block:: python
 |      
 |          {
 |              "listenKey": "pqia91ma19a5s61cv6a81va65sdf19v8a65a1a5s61cv6a81va65sdf19v8a65a1"
 |          }
 |      
 |      :raises: BinanceRequestException, BinanceAPIException
 |  
 |  mmaarrggiinn__ssttrreeaamm__kkeeeeppaalliivvee(self, listenKey)
 |      PING a cross-margin data stream to prevent a time out.
 |      
 |      https://binance-docs.github.io/apidocs/spot/en/#listen-key-margin
 |      
 |      :param listenKey: required
 |      :type listenKey: str
 |      
 |      :returns: API response
 |      
 |      .. code-block:: python
 |      
 |          {}
 |      
 |      :raises: BinanceRequestException, BinanceAPIException
 |  
 |  nneeww__ttrraannssffeerr__hhiissttoorryy(self, **params)
 |      Get future account transaction history list
 |      
 |      https://binance-docs.github.io/apidocs/delivery/en/#new-future-account-transfer
 |  
 |  ooppttiioonnss__aaccccoouunntt__iinnffoo(self, **params)
 |      Account asset info (USER_DATA)
 |      
 |      https://binance-docs.github.io/apidocs/voptions/en/#account-asset-info-user_data
 |      
 |      :param recvWindow: optional
 |      :type recvWindow: int
 |  
 |  ooppttiioonnss__bbiillll(self, **params)
 |      Account funding flow (USER_DATA)
 |      
 |      https://binance-docs.github.io/apidocs/voptions/en/#account-funding-flow-user_data
 |      
 |      :param currency: required - Asset type - USDT
 |      :type currency: str
 |      :param recordId: optional - Return the recordId and subsequent data, the latest data is returned by default - 100000
 |      :type recordId: int
 |      :param startTime: optional - Start Time - 1593511200000
 |      :type startTime: int
 |      :param endTime: optional - End Time - 1593511200000
 |      :type endTime: int
 |      :param limit: optional - Number of result sets returned Default:100 Max:1000 - 100
 |      :type limit: int
 |      :param recvWindow: optional
 |      :type recvWindow: int
 |  
 |  ooppttiioonnss__ccaanncceell__aallll__oorrddeerrss(self, **params)
 |      Cancel all Option orders (TRADE)
 |      
 |      https://binance-docs.github.io/apidocs/voptions/en/#cancel-all-option-orders-trade
 |      
 |      :param symbol: required - Option trading pair - BTC-200730-9000-C
 |      :type symbol: str
 |      :param recvWindow: optional
 |      :type recvWindow: int
 |  
 |  ooppttiioonnss__ccaanncceell__bbaattcchh__oorrddeerr(self, **params)
 |      Cancel Multiple Option orders (TRADE)
 |      
 |      https://binance-docs.github.io/apidocs/voptions/en/#cancel-multiple-option-orders-trade
 |      
 |      :param symbol: required - Option trading pair - BTC-200730-9000-C
 |      :type symbol: str
 |      :param orderIds: optional - Order ID - [4611875134427365377,4611875134427365378]
 |      :type orderId: list
 |      :param clientOrderIds: optional - User-defined order ID - ["my_id_1","my_id_2"]
 |      :type clientOrderIds: list
 |      :param recvWindow: optional
 |      :type recvWindow: int
 |  
 |  ooppttiioonnss__ccaanncceell__oorrddeerr(self, **params)
 |      Cancel Option order (TRADE)
 |      
 |      https://binance-docs.github.io/apidocs/voptions/en/#cancel-option-order-trade
 |      
 |      :param symbol: required - Option trading pair - BTC-200730-9000-C
 |      :type symbol: str
 |      :param orderId: optional - Order ID - 4611875134427365377
 |      :type orderId: str
 |      :param clientOrderId: optional - User-defined order ID - 10000
 |      :type clientOrderId: str
 |      :param recvWindow: optional
 |      :type recvWindow: int
 |  
 |  ooppttiioonnss__eexxcchhaannggee__iinnffoo(self)
 |      Get current limit info and trading pair info
 |      
 |      https://binance-docs.github.io/apidocs/voptions/en/#get-current-limit-info-and-trading-pair-info
 |  
 |  ooppttiioonnss__ffuunnddss__ttrraannssffeerr(self, **params)
 |      Funds transfer (USER_DATA)
 |      
 |      https://binance-docs.github.io/apidocs/voptions/en/#funds-transfer-user_data
 |      
 |      :param currency: required - Asset type - USDT
 |      :type currency: str
 |      :param type: required - IN: Transfer from spot account to option account OUT: Transfer from option account to spot account - IN
 |      :type type: str (ENUM)
 |      :param amount: required - Amount - 10000
 |      :type amount: float
 |      :param recvWindow: optional
 |      :type recvWindow: int
 |  
 |  ooppttiioonnss__hhiissttoorriiccaall__ttrraaddeess(self, **params)
 |      Query trade history
 |      
 |      https://binance-docs.github.io/apidocs/voptions/en/#query-trade-history
 |      
 |      :param symbol: required - Option trading pair - BTC-200730-9000-C
 |      :type symbol: str
 |      :param fromId: optional - The deal ID from which to return. The latest deal record is returned by default - 1592317127349
 |      :type fromId: int
 |      :param limit: optional - Number of records Default:100 Max:500 - 100
 |      :type limit: int
 |  
 |  ooppttiioonnss__iinnddeexx__pprriiccee(self, **params)
 |      Get the spot index price
 |      
 |      https://binance-docs.github.io/apidocs/voptions/en/#get-the-spot-index-price
 |      
 |      :param underlying: required - Spot pairï¼ˆOption contract underlying assetï¼‰- BTCUSDT
 |      :type underlying: str
 |  
 |  ooppttiioonnss__iinnffoo(self)
 |      Get current trading pair info
 |      
 |      https://binance-docs.github.io/apidocs/voptions/en/#get-current-trading-pair-info
 |  
 |  ooppttiioonnss__kklliinneess(self, **params)
 |      Candle data
 |      
 |      https://binance-docs.github.io/apidocs/voptions/en/#candle-data
 |      
 |      :param symbol: required - Option trading pair - BTC-200730-9000-C
 |      :type symbol: str
 |      :param interval: required - Time interval - 5m
 |      :type interval: str
 |      :param startTime: optional - Start Time - 1592317127349
 |      :type startTime: int
 |      :param endTime: optional - End Time - 1592317127349
 |      :type endTime: int
 |      :param limit: optional - Number of records Default:500 Max:1500 - 500
 |      :type limit: int
 |  
 |  ooppttiioonnss__mmaarrkk__pprriiccee(self, **params)
 |      Get the latest mark price
 |      
 |      https://binance-docs.github.io/apidocs/voptions/en/#get-the-latest-mark-price
 |      
 |      :param symbol: optional - Option trading pair - BTC-200730-9000-C
 |      :type symbol: str
 |  
 |  ooppttiioonnss__oorrddeerr__bbooookk(self, **params)
 |      Depth information
 |      
 |      https://binance-docs.github.io/apidocs/voptions/en/#depth-information
 |      
 |      :param symbol: required - Option trading pair - BTC-200730-9000-C
 |      :type symbol: str
 |      :param limit: optional - Default:100 Max:1000.Optional value:[10, 20, 50, 100, 500, 1000] - 100
 |      :type limit: int
 |  
 |  ooppttiioonnss__ppiinngg(self)
 |      Test connectivity
 |      
 |      https://binance-docs.github.io/apidocs/voptions/en/#test-connectivity
 |  
 |  ooppttiioonnss__ppllaaccee__bbaattcchh__oorrddeerr(self, **params)
 |      Place Multiple Option orders (TRADE)
 |      
 |      https://binance-docs.github.io/apidocs/voptions/en/#place-multiple-option-orders-trade
 |      
 |      :param orders: required - order list. Max 5 orders - [{"symbol":"BTC-210115-35000-C","price":"100","quantity":"0.0001","side":"BUY","type":"LIMIT"}]
 |      :type orders: list
 |      :param recvWindow: optional
 |      :type recvWindow: int
 |  
 |  ooppttiioonnss__ppllaaccee__oorrddeerr(self, **params)
 |      Option order (TRADE)
 |      
 |      https://binance-docs.github.io/apidocs/voptions/en/#option-order-trade
 |      
 |      :param symbol: required - Option trading pair - BTC-200730-9000-C
 |      :type symbol: str
 |      :param side: required - Buy/sell direction: SELL, BUY - BUY
 |      :type side: str (ENUM)
 |      :param type: required - Order Type: LIMIT, MARKET - LIMIT
 |      :type type: str (ENUM)
 |      :param quantity: required - Order Quantity - 3
 |      :type quantity: float
 |      :param price: optional - Order Price - 1000
 |      :type price: float
 |      :param timeInForce: optional - Time in force methodï¼ˆDefault GTC) - GTC
 |      :type timeInForce: str (ENUM)
 |      :param reduceOnly: optional - Reduce Only (Default false) - false
 |      :type reduceOnly: bool
 |      :param postOnly: optional - Post Only (Default false) - false
 |      :type postOnly: bool
 |      :param newOrderRespType: optional - "ACK", "RESULT", Default "ACK" - ACK
 |      :type newOrderRespType: str (ENUM)
 |      :param clientOrderId: optional - User-defined order ID cannot be repeated in pending orders - 10000
 |      :type clientOrderId: str
 |      :param recvWindow: optional
 |      :type recvWindow: int
 |  
 |  ooppttiioonnss__ppoossiittiioonnss(self, **params)
 |      Option holdings info (USER_DATA)
 |      
 |      https://binance-docs.github.io/apidocs/voptions/en/#option-holdings-info-user_data
 |      
 |      :param symbol: optional - Option trading pair - BTC-200730-9000-C
 |      :type symbol: str
 |      :param recvWindow: optional
 |      :type recvWindow: int
 |  
 |  ooppttiioonnss__pprriiccee(self, **params)
 |      Get the latest price
 |      
 |      https://binance-docs.github.io/apidocs/voptions/en/#get-the-latest-price
 |      
 |      :param symbol: optional - Option trading pair - BTC-200730-9000-C
 |      :type symbol: str
 |  
 |  ooppttiioonnss__qquueerryy__oorrddeerr(self, **params)
 |      Query Option order (TRADE)
 |      
 |      https://binance-docs.github.io/apidocs/voptions/en/#query-option-order-trade
 |      
 |      :param symbol: required - Option trading pair - BTC-200730-9000-C
 |      :type symbol: str
 |      :param orderId: optional - Order ID - 4611875134427365377
 |      :type orderId: str
 |      :param clientOrderId: optional - User-defined order ID - 10000
 |      :type clientOrderId: str
 |      :param recvWindow: optional
 |      :type recvWindow: int
 |  
 |  ooppttiioonnss__qquueerryy__oorrddeerr__hhiissttoorryy(self, **params)
 |      Query Option order history (TRADE)
 |      
 |      https://binance-docs.github.io/apidocs/voptions/en/#query-option-order-history-trade
 |      
 |      :param symbol: required - Option trading pair - BTC-200730-9000-C
 |      :type symbol: str
 |      :param orderId: optional - Returns the orderId and subsequent orders, the most recent order is returned by default - 100000
 |      :type orderId: str
 |      :param startTime: optional - Start Time - 1593511200000
 |      :type startTime: int
 |      :param endTime: optional - End Time - 1593511200000
 |      :type endTime: int
 |      :param limit: optional - Number of result sets returned Default:100 Max:1000 - 100
 |      :type limit: int
 |      :param recvWindow: optional
 |      :type recvWindow: int
 |  
 |  ooppttiioonnss__qquueerryy__ppeennddiinngg__oorrddeerrss(self, **params)
 |      Query current pending Option orders (TRADE)
 |      
 |      https://binance-docs.github.io/apidocs/voptions/en/#query-current-pending-option-orders-trade
 |      
 |      :param symbol: required - Option trading pair - BTC-200730-9000-C
 |      :type symbol: str
 |      :param orderId: optional - Returns the orderId and subsequent orders, the most recent order is returned by default - 100000
 |      :type orderId: str
 |      :param startTime: optional - Start Time - 1593511200000
 |      :type startTime: int
 |      :param endTime: optional - End Time - 1593511200000
 |      :type endTime: int
 |      :param limit: optional - Number of result sets returned Default:100 Max:1000 - 100
 |      :type limit: int
 |      :param recvWindow: optional
 |      :type recvWindow: int
 |  
 |  ooppttiioonnss__rreecceenntt__ttrraaddeess(self, **params)
 |      Recently completed Option trades
 |      
 |      https://binance-docs.github.io/apidocs/voptions/en/#recently-completed-option-trades
 |      
 |      :param symbol: required - Option trading pair - BTC-200730-9000-C
 |      :type symbol: str
 |      :param limit: optional - Number of records Default:100 Max:500 - 100
 |      :type limit: int
 |  
 |  ooppttiioonnss__ttiimmee(self)
 |      Get server time
 |      
 |      https://binance-docs.github.io/apidocs/voptions/en/#get-server-time
 |  
 |  ooppttiioonnss__uusseerr__ttrraaddeess(self, **params)
 |      Option Trade List (USER_DATA)
 |      
 |      https://binance-docs.github.io/apidocs/voptions/en/#option-trade-list-user_data
 |      
 |      :param symbol: required - Option trading pair - BTC-200730-9000-C
 |      :type symbol: str
 |      :param fromId: optional - Trade id to fetch from. Default gets most recent trades. - 4611875134427365376
 |      :type orderId: int
 |      :param startTime: optional - Start Time - 1593511200000
 |      :type startTime: int
 |      :param endTime: optional - End Time - 1593511200000
 |      :type endTime: int
 |      :param limit: optional - Number of result sets returned Default:100 Max:1000 - 100
 |      :type limit: int
 |      :param recvWindow: optional
 |      :type recvWindow: int
 |  
 |  oorrddeerr__lliimmiitt(self, timeInForce='GTC', **params)
 |      Send in a new limit order
 |      
 |      Any order with an icebergQty MUST have timeInForce set to GTC.
 |      
 |      :param symbol: required
 |      :type symbol: str
 |      :param side: required
 |      :type side: str
 |      :param quantity: required
 |      :type quantity: decimal
 |      :param price: required
 |      :type price: str
 |      :param timeInForce: default Good till cancelled
 |      :type timeInForce: str
 |      :param newClientOrderId: A unique id for the order. Automatically generated if not sent.
 |      :type newClientOrderId: str
 |      :param icebergQty: Used with LIMIT, STOP_LOSS_LIMIT, and TAKE_PROFIT_LIMIT to create an iceberg order.
 |      :type icebergQty: decimal
 |      :param newOrderRespType: Set the response JSON. ACK, RESULT, or FULL; default: RESULT.
 |      :type newOrderRespType: str
 |      :param recvWindow: the number of milliseconds the request is valid for
 |      :type recvWindow: int
 |      
 |      :returns: API response
 |      
 |      See order endpoint for full response options
 |      
 |      :raises: BinanceRequestException, BinanceAPIException, BinanceOrderException, BinanceOrderMinAmountException, BinanceOrderMinPriceException, BinanceOrderMinTotalException, BinanceOrderUnknownSymbolException, BinanceOrderInactiveSymbolException
 |  
 |  oorrddeerr__lliimmiitt__bbuuyy(self, timeInForce='GTC', **params)
 |      Send in a new limit buy order
 |      
 |      Any order with an icebergQty MUST have timeInForce set to GTC.
 |      
 |      :param symbol: required
 |      :type symbol: str
 |      :param quantity: required
 |      :type quantity: decimal
 |      :param price: required
 |      :type price: str
 |      :param timeInForce: default Good till cancelled
 |      :type timeInForce: str
 |      :param newClientOrderId: A unique id for the order. Automatically generated if not sent.
 |      :type newClientOrderId: str
 |      :param stopPrice: Used with stop orders
 |      :type stopPrice: decimal
 |      :param icebergQty: Used with iceberg orders
 |      :type icebergQty: decimal
 |      :param newOrderRespType: Set the response JSON. ACK, RESULT, or FULL; default: RESULT.
 |      :type newOrderRespType: str
 |      :param recvWindow: the number of milliseconds the request is valid for
 |      :type recvWindow: int
 |      
 |      :returns: API response
 |      
 |      See order endpoint for full response options
 |      
 |      :raises: BinanceRequestException, BinanceAPIException, BinanceOrderException, BinanceOrderMinAmountException, BinanceOrderMinPriceException, BinanceOrderMinTotalException, BinanceOrderUnknownSymbolException, BinanceOrderInactiveSymbolException
 |  
 |  oorrddeerr__lliimmiitt__sseellll(self, timeInForce='GTC', **params)
 |      Send in a new limit sell order
 |      
 |      :param symbol: required
 |      :type symbol: str
 |      :param quantity: required
 |      :type quantity: decimal
 |      :param price: required
 |      :type price: str
 |      :param timeInForce: default Good till cancelled
 |      :type timeInForce: str
 |      :param newClientOrderId: A unique id for the order. Automatically generated if not sent.
 |      :type newClientOrderId: str
 |      :param stopPrice: Used with stop orders
 |      :type stopPrice: decimal
 |      :param icebergQty: Used with iceberg orders
 |      :type icebergQty: decimal
 |      :param newOrderRespType: Set the response JSON. ACK, RESULT, or FULL; default: RESULT.
 |      :type newOrderRespType: str
 |      :param recvWindow: the number of milliseconds the request is valid for
 |      :type recvWindow: int
 |      
 |      :returns: API response
 |      
 |      See order endpoint for full response options
 |      
 |      :raises: BinanceRequestException, BinanceAPIException, BinanceOrderException, BinanceOrderMinAmountException, BinanceOrderMinPriceException, BinanceOrderMinTotalException, BinanceOrderUnknownSymbolException, BinanceOrderInactiveSymbolException
 |  
 |  oorrddeerr__mmaarrkkeett(self, **params)
 |      Send in a new market order
 |      
 |      :param symbol: required
 |      :type symbol: str
 |      :param side: required
 |      :type side: str
 |      :param quantity: required
 |      :type quantity: decimal
 |      :param quoteOrderQty: amount the user wants to spend (when buying) or receive (when selling)
 |          of the quote asset
 |      :type quoteOrderQty: decimal
 |      :param newClientOrderId: A unique id for the order. Automatically generated if not sent.
 |      :type newClientOrderId: str
 |      :param newOrderRespType: Set the response JSON. ACK, RESULT, or FULL; default: RESULT.
 |      :type newOrderRespType: str
 |      :param recvWindow: the number of milliseconds the request is valid for
 |      :type recvWindow: int
 |      
 |      :returns: API response
 |      
 |      See order endpoint for full response options
 |      
 |      :raises: BinanceRequestException, BinanceAPIException, BinanceOrderException, BinanceOrderMinAmountException, BinanceOrderMinPriceException, BinanceOrderMinTotalException, BinanceOrderUnknownSymbolException, BinanceOrderInactiveSymbolException
 |  
 |  oorrddeerr__mmaarrkkeett__bbuuyy(self, **params)
 |      Send in a new market buy order
 |      
 |      :param symbol: required
 |      :type symbol: str
 |      :param quantity: required
 |      :type quantity: decimal
 |      :param quoteOrderQty: the amount the user wants to spend of the quote asset
 |      :type quoteOrderQty: decimal
 |      :param newClientOrderId: A unique id for the order. Automatically generated if not sent.
 |      :type newClientOrderId: str
 |      :param newOrderRespType: Set the response JSON. ACK, RESULT, or FULL; default: RESULT.
 |      :type newOrderRespType: str
 |      :param recvWindow: the number of milliseconds the request is valid for
 |      :type recvWindow: int
 |      
 |      :returns: API response
 |      
 |      See order endpoint for full response options
 |      
 |      :raises: BinanceRequestException, BinanceAPIException, BinanceOrderException, BinanceOrderMinAmountException, BinanceOrderMinPriceException, BinanceOrderMinTotalException, BinanceOrderUnknownSymbolException, BinanceOrderInactiveSymbolException
 |  
 |  oorrddeerr__mmaarrkkeett__sseellll(self, **params)
 |      Send in a new market sell order
 |      
 |      :param symbol: required
 |      :type symbol: str
 |      :param quantity: required
 |      :type quantity: decimal
 |      :param quoteOrderQty: the amount the user wants to receive of the quote asset
 |      :type quoteOrderQty: decimal
 |      :param newClientOrderId: A unique id for the order. Automatically generated if not sent.
 |      :type newClientOrderId: str
 |      :param newOrderRespType: Set the response JSON. ACK, RESULT, or FULL; default: RESULT.
 |      :type newOrderRespType: str
 |      :param recvWindow: the number of milliseconds the request is valid for
 |      :type recvWindow: int
 |      
 |      :returns: API response
 |      
 |      See order endpoint for full response options
 |      
 |      :raises: BinanceRequestException, BinanceAPIException, BinanceOrderException, BinanceOrderMinAmountException, BinanceOrderMinPriceException, BinanceOrderMinTotalException, BinanceOrderUnknownSymbolException, BinanceOrderInactiveSymbolException
 |  
 |  oorrddeerr__ooccoo__bbuuyy(self, **params)
 |      Send in a new OCO buy order
 |      
 |      :param symbol: required
 |      :type symbol: str
 |      :param listClientOrderId: A unique id for the list order. Automatically generated if not sent.
 |      :type listClientOrderId: str
 |      :param quantity: required
 |      :type quantity: decimal
 |      :param limitClientOrderId: A unique id for the limit order. Automatically generated if not sent.
 |      :type limitClientOrderId: str
 |      :param price: required
 |      :type price: str
 |      :param limitIcebergQty: Used to make the LIMIT_MAKER leg an iceberg order.
 |      :type limitIcebergQty: decimal
 |      :param stopClientOrderId: A unique id for the stop order. Automatically generated if not sent.
 |      :type stopClientOrderId: str
 |      :param stopPrice: required
 |      :type stopPrice: str
 |      :param stopLimitPrice: If provided, stopLimitTimeInForce is required.
 |      :type stopLimitPrice: str
 |      :param stopIcebergQty: Used with STOP_LOSS_LIMIT leg to make an iceberg order.
 |      :type stopIcebergQty: decimal
 |      :param stopLimitTimeInForce: Valid values are GTC/FOK/IOC.
 |      :type stopLimitTimeInForce: str
 |      :param newOrderRespType: Set the response JSON. ACK, RESULT, or FULL; default: RESULT.
 |      :type newOrderRespType: str
 |      :param recvWindow: the number of milliseconds the request is valid for
 |      :type recvWindow: int
 |      
 |      :returns: API response
 |      
 |      See OCO order endpoint for full response options
 |      
 |      :raises: BinanceRequestException, BinanceAPIException, BinanceOrderException, BinanceOrderMinAmountException, BinanceOrderMinPriceException, BinanceOrderMinTotalException, BinanceOrderUnknownSymbolException, BinanceOrderInactiveSymbolException
 |  
 |  oorrddeerr__ooccoo__sseellll(self, **params)
 |      Send in a new OCO sell order
 |      
 |      :param symbol: required
 |      :type symbol: str
 |      :param listClientOrderId: A unique id for the list order. Automatically generated if not sent.
 |      :type listClientOrderId: str
 |      :param quantity: required
 |      :type quantity: decimal
 |      :param limitClientOrderId: A unique id for the limit order. Automatically generated if not sent.
 |      :type limitClientOrderId: str
 |      :param price: required
 |      :type price: str
 |      :param limitIcebergQty: Used to make the LIMIT_MAKER leg an iceberg order.
 |      :type limitIcebergQty: decimal
 |      :param stopClientOrderId: A unique id for the stop order. Automatically generated if not sent.
 |      :type stopClientOrderId: str
 |      :param stopPrice: required
 |      :type stopPrice: str
 |      :param stopLimitPrice: If provided, stopLimitTimeInForce is required.
 |      :type stopLimitPrice: str
 |      :param stopIcebergQty: Used with STOP_LOSS_LIMIT leg to make an iceberg order.
 |      :type stopIcebergQty: decimal
 |      :param stopLimitTimeInForce: Valid values are GTC/FOK/IOC.
 |      :type stopLimitTimeInForce: str
 |      :param newOrderRespType: Set the response JSON. ACK, RESULT, or FULL; default: RESULT.
 |      :type newOrderRespType: str
 |      :param recvWindow: the number of milliseconds the request is valid for
 |      :type recvWindow: int
 |      
 |      :returns: API response
 |      
 |      See OCO order endpoint for full response options
 |      
 |      :raises: BinanceRequestException, BinanceAPIException, BinanceOrderException, BinanceOrderMinAmountException, BinanceOrderMinPriceException, BinanceOrderMinTotalException, BinanceOrderUnknownSymbolException, BinanceOrderInactiveSymbolException
 |  
 |  ppiinngg(self) -> Dict
 |      Test connectivity to the Rest API.
 |      
 |      https://github.com/binance/binance-spot-api-docs/blob/master/rest-api.md#test-connectivity
 |      
 |      :returns: Empty array
 |      
 |      .. code-block:: python
 |      
 |          {}
 |      
 |      :raises: BinanceRequestException, BinanceAPIException
 |  
 |  ppuurrcchhaassee__lleennddiinngg__pprroodduucctt(self, **params)
 |      Purchase Flexible Product
 |      
 |      https://binance-docs.github.io/apidocs/spot/en/#purchase-flexible-product-user_data
 |  
 |  qquueerryy__ssuubbaaccccoouunntt__ssppoott__ssuummmmaarryy(self, **params)
 |      Query Sub-account Spot Assets Summary (For Master Account)
 |      
 |      https://binance-docs.github.io/apidocs/spot/en/#query-sub-account-spot-assets-summary-for-master-account
 |      
 |      :param email: optional - Sub account email
 |      :type email: str
 |      :param page: optional - default 1
 |      :type page: int
 |      :param size: optional - default 10, max 20
 |      :type size: int
 |      :param recvWindow: optional
 |      :type recvWindow: int
 |      
 |      :returns: API response
 |      
 |      .. code-block:: python
 |      
 |         {
 |              "totalCount":2,
 |              "masterAccountTotalAsset": "0.23231201",
 |              "spotSubUserAssetBtcVoList":[
 |                  {
 |                      "email":"sub123@test.com",
 |                      "totalAsset":"9999.00000000"
 |                  },
 |                  {
 |                      "email":"test456@test.com",
 |                      "totalAsset":"0.00000000"
 |                  }
 |              ]
 |          }
 |      
 |      :raises: BinanceRequestException, BinanceAPIException
 |  
 |  qquueerryy__uunniivveerrssaall__ttrraannssffeerr__hhiissttoorryy(self, **params)
 |      Query User Universal Transfer History
 |      
 |      https://binance-docs.github.io/apidocs/spot/en/#query-user-universal-transfer-history
 |      
 |      :param type: required
 |      :type type: str (ENUM)
 |      :param startTime: optional
 |      :type startTime: int
 |      :param endTime: optional
 |      :type endTime: int
 |      :param current: optional - Default 1
 |      :type current: int
 |      :param size: required - Default 10, Max 100
 |      :type size: int
 |      :param recvWindow: the number of milliseconds the request is valid for
 |      :type recvWindow: int
 |      
 |      .. code:: python
 |      
 |          transfer_status = client.query_universal_transfer_history(params)
 |      
 |      :returns: API response
 |      
 |      .. code-block:: python
 |      
 |          {
 |              "total":2,
 |              "rows":[
 |                  {
 |                      "asset":"USDT",
 |                      "amount":"1",
 |                      "type":"MAIN_UMFUTURE"
 |                      "status": "CONFIRMED",
 |                      "tranId": 11415955596,
 |                      "timestamp":1544433328000
 |                  },
 |                  {
 |                      "asset":"USDT",
 |                      "amount":"2",
 |                      "type":"MAIN_UMFUTURE",
 |                      "status": "CONFIRMED",
 |                      "tranId": 11366865406,
 |                      "timestamp":1544433328000
 |                  }
 |              ]
 |          }
 |      
 |      
 |      :raises: BinanceRequestException, BinanceAPIException
 |  
 |  rreeddeeeemm__lleennddiinngg__pprroodduucctt(self, **params)
 |      Redeem Flexible Product
 |      
 |      https://binance-docs.github.io/apidocs/spot/en/#redeem-flexible-product-user_data
 |  
 |  rreeppaayy__mmaarrggiinn__llooaann(self, **params)
 |      Repay loan in cross-margin or isolated-margin account.
 |      
 |      If amount is more than the amount borrowed, the full loan will be repaid.
 |      
 |      https://binance-docs.github.io/apidocs/spot/en/#margin-account-repay-margin
 |      
 |      :param asset: name of the asset
 |      :type asset: str
 |      :param amount: amount to transfer
 |      :type amount: str
 |      :param isIsolated: set to 'TRUE' for isolated margin (default 'FALSE')
 |      :type isIsolated: str
 |      :param symbol: Isolated margin symbol (default blank for cross-margin)
 |      :type symbol: str
 |      :param recvWindow: the number of milliseconds the request is valid for
 |      :type recvWindow: int
 |      
 |      .. code:: python
 |      
 |          transaction = client.margin_repay_loan(asset='BTC', amount='1.1')
 |      
 |          transaction = client.margin_repay_loan(asset='BTC', amount='1.1',
 |                                                  isIsolated='TRUE', symbol='ETHBTC')
 |      
 |      :returns: API response
 |      
 |      .. code-block:: python
 |      
 |          {
 |              "tranId": 100000001
 |          }
 |      
 |      :raises: BinanceRequestException, BinanceAPIException
 |  
 |  ssttrreeaamm__cclloossee(self, listenKey)
 |      Close out a user data stream.
 |      
 |      https://github.com/binance/binance-spot-api-docs/blob/master/rest-api.md#close-user-data-stream-user_stream
 |      
 |      :param listenKey: required
 |      :type listenKey: str
 |      
 |      :returns: API response
 |      
 |      .. code-block:: python
 |      
 |          {}
 |      
 |      :raises: BinanceRequestException, BinanceAPIException
 |  
 |  ssttrreeaamm__ggeett__lliisstteenn__kkeeyy(self)
 |      Start a new user data stream and return the listen key
 |      If a stream already exists it should return the same key.
 |      If the stream becomes invalid a new key is returned.
 |      
 |      Can be used to keep the user stream alive.
 |      
 |      https://github.com/binance/binance-spot-api-docs/blob/master/rest-api.md#start-user-data-stream-user_stream
 |      
 |      :returns: API response
 |      
 |      .. code-block:: python
 |      
 |          {
 |              "listenKey": "pqia91ma19a5s61cv6a81va65sdf19v8a65a1a5s61cv6a81va65sdf19v8a65a1"
 |          }
 |      
 |      :raises: BinanceRequestException, BinanceAPIException
 |  
 |  ssttrreeaamm__kkeeeeppaalliivvee(self, listenKey)
 |      PING a user data stream to prevent a time out.
 |      
 |      https://github.com/binance/binance-spot-api-docs/blob/master/rest-api.md#keepalive-user-data-stream-user_stream
 |      
 |      :param listenKey: required
 |      :type listenKey: str
 |      
 |      :returns: API response
 |      
 |      .. code-block:: python
 |      
 |          {}
 |      
 |      :raises: BinanceRequestException, BinanceAPIException
 |  
 |  ttooggggllee__bbnnbb__bbuurrnn__ssppoott__mmaarrggiinn(self, **params)
 |      Toggle BNB Burn On Spot Trade And Margin Interest
 |      
 |      https://binance-docs.github.io/apidocs/spot/en/#toggle-bnb-burn-on-spot-trade-and-margin-interest-user_data
 |      
 |      :param spotBNBBurn: Determines whether to use BNB to pay for trading fees on SPOT
 |      :type spotBNBBurn: bool
 |      :param interestBNBBurn: Determines whether to use BNB to pay for margin loan's interest
 |      :type interestBNBBurn: bool
 |      
 |      .. code:: python
 |      
 |          response = client.toggle_bnb_burn_spot_margin()
 |      
 |      :returns: API response
 |      
 |      .. code-block:: python
 |      
 |          {
 |             "spotBNBBurn":true,
 |             "interestBNBBurn": false
 |          }
 |      
 |      
 |      :raises: BinanceRequestException, BinanceAPIException
 |  
 |  ttrraannssffeerr__dduusstt(self, **params)
 |      Convert dust assets to BNB.
 |      
 |      https://binance-docs.github.io/apidocs/spot/en/#dust-transfer-user_data
 |      
 |      :param asset: The asset being converted. e.g: 'ONE'
 |      :type asset: str
 |      :param recvWindow: the number of milliseconds the request is valid for
 |      :type recvWindow: int
 |      
 |      .. code:: python
 |      
 |          result = client.transfer_dust(asset='ONE')
 |      
 |      :returns: API response
 |      
 |      .. code-block:: python
 |      
 |          {
 |              "totalServiceCharge":"0.02102542",
 |              "totalTransfered":"1.05127099",
 |              "transferResult":[
 |                  {
 |                      "amount":"0.03000000",
 |                      "fromAsset":"ETH",
 |                      "operateTime":1563368549307,
 |                      "serviceChargeAmount":"0.00500000",
 |                      "tranId":2970932918,
 |                      "transferedAmount":"0.25000000"
 |                  }
 |              ]
 |          }
 |      
 |      :raises: BinanceRequestException, BinanceAPIException
 |  
 |  ttrraannssffeerr__hhiissttoorryy(self, **params)
 |      Get future account transaction history list
 |      
 |      https://binance-docs.github.io/apidocs/futures/en/#get-future-account-transaction-history-list-user_data
 |  
 |  ttrraannssffeerr__iissoollaatteedd__mmaarrggiinn__ttoo__ssppoott(self, **params)
 |      Execute transfer between isolated margin account and spot account.
 |      
 |      https://binance-docs.github.io/apidocs/spot/en/#isolated-margin-account-transfer-margin
 |      
 |      :param asset: name of the asset
 |      :type asset: str
 |      :param symbol: pair symbol
 |      :type symbol: str
 |      :param amount: amount to transfer
 |      :type amount: str
 |      :param recvWindow: the number of milliseconds the request is valid for
 |      :type recvWindow: int
 |      
 |      .. code:: python
 |      
 |          transfer = client.transfer_isolated_margin_to_spot(asset='BTC',
 |                                                              symbol='ETHBTC', amount='1.1')
 |      
 |      :returns: API response
 |      
 |      .. code-block:: python
 |      
 |          {
 |              "tranId": 100000001
 |          }
 |      
 |      :raises: BinanceRequestException, BinanceAPIException
 |  
 |  ttrraannssffeerr__mmaarrggiinn__ttoo__ssppoott(self, **params)
 |      Execute transfer between cross-margin account and spot account.
 |      
 |      https://binance-docs.github.io/apidocs/spot/en/#cross-margin-account-transfer-margin
 |      
 |      :param asset: name of the asset
 |      :type asset: str
 |      :param amount: amount to transfer
 |      :type amount: str
 |      :param recvWindow: the number of milliseconds the request is valid for
 |      :type recvWindow: int
 |      
 |      .. code:: python
 |      
 |          transfer = client.transfer_margin_to_spot(asset='BTC', amount='1.1')
 |      
 |      :returns: API response
 |      
 |      .. code-block:: python
 |      
 |          {
 |              "tranId": 100000001
 |          }
 |      
 |      :raises: BinanceRequestException, BinanceAPIException
 |  
 |  ttrraannssffeerr__ssppoott__ttoo__iissoollaatteedd__mmaarrggiinn(self, **params)
 |      Execute transfer between spot account and isolated margin account.
 |      
 |      https://binance-docs.github.io/apidocs/spot/en/#isolated-margin-account-transfer-margin
 |      
 |      :param asset: name of the asset
 |      :type asset: str
 |      :param symbol: pair symbol
 |      :type symbol: str
 |      :param amount: amount to transfer
 |      :type amount: str
 |      :param recvWindow: the number of milliseconds the request is valid for
 |      :type recvWindow: int
 |      
 |      .. code:: python
 |      
 |          transfer = client.transfer_spot_to_isolated_margin(asset='BTC',
 |                                                              symbol='ETHBTC', amount='1.1')
 |      
 |      :returns: API response
 |      
 |      .. code-block:: python
 |      
 |          {
 |              "tranId": 100000001
 |          }
 |      
 |      :raises: BinanceRequestException, BinanceAPIException
 |  
 |  ttrraannssffeerr__ssppoott__ttoo__mmaarrggiinn(self, **params)
 |      Execute transfer between spot account and cross-margin account.
 |      
 |      https://binance-docs.github.io/apidocs/spot/en/#cross-margin-account-transfer-margin
 |      
 |      :param asset: name of the asset
 |      :type asset: str
 |      :param amount: amount to transfer
 |      :type amount: str
 |      :param recvWindow: the number of milliseconds the request is valid for
 |      :type recvWindow: int
 |      
 |      .. code:: python
 |      
 |          transfer = client.transfer_spot_to_margin(asset='BTC', amount='1.1')
 |      
 |      :returns: API response
 |      
 |      .. code-block:: python
 |      
 |          {
 |              "tranId": 100000001
 |          }
 |      
 |      :raises: BinanceRequestException, BinanceAPIException
 |  
 |  uunniivveerrssaall__ttrraannssffeerr(self, **params)
 |      Unviversal transfer api accross different binance account types
 |      
 |      https://binance-docs.github.io/apidocs/spot/en/#user-universal-transfer
 |  
 |  wwiitthhddrraaww(self, **params)
 |      Submit a withdraw request.
 |      
 |      https://binance-docs.github.io/apidocs/spot/en/#withdraw-sapi
 |      
 |      Assumptions:
 |      
 |      - You must have Withdraw permissions enabled on your API key
 |      - You must have withdrawn to the address specified through the website and approved the transaction via email
 |      
 |      :param coin: required
 |      :type coin: str
 |      :param withdrawOrderId: optional - client id for withdraw
 |      :type withdrawOrderId: str
 |      :param network: optional
 |      :type network: str
 |      :param address: optional
 |      :type address: str
 |      :type addressTag: optional - Secondary address identifier for coins like XRP,XMR etc.
 |      :param amount: required
 |      :type amount: decimal
 |      :param transactionFeeFlag: required - When making internal transfer, true for returning the fee to the destination account; false for returning the fee back to the departure account. Default false.
 |      :type transactionFeeFlag: bool
 |      :param name: optional - Description of the address, default asset value passed will be used
 |      :type name: str
 |      :param recvWindow: the number of milliseconds the request is valid for
 |      :type recvWindow: int
 |      
 |      :returns: API response
 |      
 |      .. code-block:: python
 |      
 |          {
 |              "id":"7213fea8e94b4a5593d507237e5a555b"
 |          }
 |      
 |      :raises: BinanceRequestException, BinanceAPIException, BinanceWithdrawException
 |  
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from BaseClient:
 |  
 |  ____ddiicctt____
 |      dictionary for instance variables (if defined)
 |  
 |  ____wweeaakkrreeff____
 |      list of weak references to the object (if defined)
 |  
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from BaseClient:
 |  
 |  AAGGGG__BBEESSTT__MMAATTCCHH = 'M'
 |  
 |  AAGGGG__BBUUYYEERR__MMAAKKEESS = 'm'
 |  
 |  AAGGGG__FFIIRRSSTT__TTRRAADDEE__IIDD = 'f'
 |  
 |  AAGGGG__IIDD = 'a'
 |  
 |  AAGGGG__LLAASSTT__TTRRAADDEE__IIDD = 'l'
 |  
 |  AAGGGG__PPRRIICCEE = 'p'
 |  
 |  AAGGGG__QQUUAANNTTIITTYY = 'q'
 |  
 |  AAGGGG__TTIIMMEE = 'T'
 |  
 |  AAPPII__TTEESSTTNNEETT__UURRLL = 'https://testnet.binance.vision/api'
 |  
 |  AAPPII__UURRLL = 'https://api.binance.{}/api'
 |  
 |  CCOOIINN__FFUUTTUURREE__TTOO__SSPPOOTT = 'CMFUTURE_MAIN'
 |  
 |  FFIIAATT__TTOO__MMIINNIINNGG = 'C2C_MINING'
 |  
 |  FFIIAATT__TTOO__SSPPOOTT = 'C2C_MAIN'
 |  
 |  FFIIAATT__TTOO__UUSSDDTT__FFUUTTUURREE = 'C2C_UMFUTURE'
 |  
 |  FFUUTTUURREESS__AAPPII__VVEERRSSIIOONN = 'v1'
 |  
 |  FFUUTTUURREESS__AAPPII__VVEERRSSIIOONN22 = 'v2'
 |  
 |  FFUUTTUURREESS__CCOOIINN__DDAATTAA__TTEESSTTNNEETT__UURRLL = 'https://testnet.binancefuture.com/fut...
 |  
 |  FFUUTTUURREESS__CCOOIINN__DDAATTAA__UURRLL = 'https://dapi.binance.{}/futures/data'
 |  
 |  FFUUTTUURREESS__CCOOIINN__TTEESSTTNNEETT__UURRLL = 'https://testnet.binancefuture.com/dapi'
 |  
 |  FFUUTTUURREESS__CCOOIINN__UURRLL = 'https://dapi.binance.{}/dapi'
 |  
 |  FFUUTTUURREESS__DDAATTAA__TTEESSTTNNEETT__UURRLL = 'https://testnet.binancefuture.com/futures/...
 |  
 |  FFUUTTUURREESS__DDAATTAA__UURRLL = 'https://fapi.binance.{}/futures/data'
 |  
 |  FFUUTTUURREESS__TTEESSTTNNEETT__UURRLL = 'https://testnet.binancefuture.com/fapi'
 |  
 |  FFUUTTUURREESS__UURRLL = 'https://fapi.binance.{}/fapi'
 |  
 |  FFUUTTUURREE__OORRDDEERR__TTYYPPEE__LLIIMMIITT = 'LIMIT'
 |  
 |  FFUUTTUURREE__OORRDDEERR__TTYYPPEE__LLIIMMIITT__MMAAKKEERR = 'LIMIT_MAKER'
 |  
 |  FFUUTTUURREE__OORRDDEERR__TTYYPPEE__MMAARRKKEETT = 'MARKET'
 |  
 |  FFUUTTUURREE__OORRDDEERR__TTYYPPEE__SSTTOOPP = 'STOP'
 |  
 |  FFUUTTUURREE__OORRDDEERR__TTYYPPEE__SSTTOOPP__MMAARRKKEETT = 'STOP_MARKET'
 |  
 |  FFUUTTUURREE__OORRDDEERR__TTYYPPEE__TTAAKKEE__PPRROOFFIITT = 'TAKE_PROFIT'
 |  
 |  FFUUTTUURREE__OORRDDEERR__TTYYPPEE__TTAAKKEE__PPRROOFFIITT__MMAARRKKEETT = 'TAKE_PROFIT_MARKET'
 |  
 |  KKLLIINNEE__IINNTTEERRVVAALL__1122HHOOUURR = '12h'
 |  
 |  KKLLIINNEE__IINNTTEERRVVAALL__1155MMIINNUUTTEE = '15m'
 |  
 |  KKLLIINNEE__IINNTTEERRVVAALL__11DDAAYY = '1d'
 |  
 |  KKLLIINNEE__IINNTTEERRVVAALL__11HHOOUURR = '1h'
 |  
 |  KKLLIINNEE__IINNTTEERRVVAALL__11MMIINNUUTTEE = '1m'
 |  
 |  KKLLIINNEE__IINNTTEERRVVAALL__11MMOONNTTHH = '1M'
 |  
 |  KKLLIINNEE__IINNTTEERRVVAALL__11WWEEEEKK = '1w'
 |  
 |  KKLLIINNEE__IINNTTEERRVVAALL__22HHOOUURR = '2h'
 |  
 |  KKLLIINNEE__IINNTTEERRVVAALL__3300MMIINNUUTTEE = '30m'
 |  
 |  KKLLIINNEE__IINNTTEERRVVAALL__33DDAAYY = '3d'
 |  
 |  KKLLIINNEE__IINNTTEERRVVAALL__33MMIINNUUTTEE = '3m'
 |  
 |  KKLLIINNEE__IINNTTEERRVVAALL__44HHOOUURR = '4h'
 |  
 |  KKLLIINNEE__IINNTTEERRVVAALL__55MMIINNUUTTEE = '5m'
 |  
 |  KKLLIINNEE__IINNTTEERRVVAALL__66HHOOUURR = '6h'
 |  
 |  KKLLIINNEE__IINNTTEERRVVAALL__88HHOOUURR = '8h'
 |  
 |  MMAARRGGIINN__AAPPII__UURRLL = 'https://api.binance.{}/sapi'
 |  
 |  MMAARRGGIINN__AAPPII__VVEERRSSIIOONN = 'v1'
 |  
 |  MMAARRGGIINN__CCRROOSSSS__TTOO__SSPPOOTT = 'MARGIN_MAIN'
 |  
 |  MMAARRGGIINN__CCRROOSSSS__TTOO__UUSSDDTT__FFUUTTUURREE = 'MARGIN_UMFUTURE'
 |  
 |  MMIINNIINNGG__TTOO__FFIIAATT = 'MINING_C2C'
 |  
 |  MMIINNIINNGG__TTOO__SSPPOOTT = 'MINING_MAIN'
 |  
 |  MMIINNIINNGG__TTOO__UUSSDDTT__FFUUTTUURREE = 'MINING_UMFUTURE'
 |  
 |  OOPPTTIIOONNSS__AAPPII__VVEERRSSIIOONN = 'v1'
 |  
 |  OOPPTTIIOONNSS__TTEESSTTNNEETT__UURRLL = 'https://testnet.binanceops.{}/vapi'
 |  
 |  OOPPTTIIOONNSS__UURRLL = 'https://vapi.binance.{}/vapi'
 |  
 |  OORRDDEERR__RREESSPP__TTYYPPEE__AACCKK = 'ACK'
 |  
 |  OORRDDEERR__RREESSPP__TTYYPPEE__FFUULLLL = 'FULL'
 |  
 |  OORRDDEERR__RREESSPP__TTYYPPEE__RREESSUULLTT = 'RESULT'
 |  
 |  OORRDDEERR__SSTTAATTUUSS__CCAANNCCEELLEEDD = 'CANCELED'
 |  
 |  OORRDDEERR__SSTTAATTUUSS__EEXXPPIIRREEDD = 'EXPIRED'
 |  
 |  OORRDDEERR__SSTTAATTUUSS__FFIILLLLEEDD = 'FILLED'
 |  
 |  OORRDDEERR__SSTTAATTUUSS__NNEEWW = 'NEW'
 |  
 |  OORRDDEERR__SSTTAATTUUSS__PPAARRTTIIAALLLLYY__FFIILLLLEEDD = 'PARTIALLY_FILLED'
 |  
 |  OORRDDEERR__SSTTAATTUUSS__PPEENNDDIINNGG__CCAANNCCEELL = 'PENDING_CANCEL'
 |  
 |  OORRDDEERR__SSTTAATTUUSS__RREEJJEECCTTEEDD = 'REJECTED'
 |  
 |  OORRDDEERR__TTYYPPEE__LLIIMMIITT = 'LIMIT'
 |  
 |  OORRDDEERR__TTYYPPEE__LLIIMMIITT__MMAAKKEERR = 'LIMIT_MAKER'
 |  
 |  OORRDDEERR__TTYYPPEE__MMAARRKKEETT = 'MARKET'
 |  
 |  OORRDDEERR__TTYYPPEE__SSTTOOPP__LLOOSSSS = 'STOP_LOSS'
 |  
 |  OORRDDEERR__TTYYPPEE__SSTTOOPP__LLOOSSSS__LLIIMMIITT = 'STOP_LOSS_LIMIT'
 |  
 |  OORRDDEERR__TTYYPPEE__TTAAKKEE__PPRROOFFIITT = 'TAKE_PROFIT'
 |  
 |  OORRDDEERR__TTYYPPEE__TTAAKKEE__PPRROOFFIITT__LLIIMMIITT = 'TAKE_PROFIT_LIMIT'
 |  
 |  PPRRIIVVAATTEE__AAPPII__VVEERRSSIIOONN = 'v3'
 |  
 |  PPUUBBLLIICC__AAPPII__VVEERRSSIIOONN = 'v1'
 |  
 |  SSIIDDEE__BBUUYY = 'BUY'
 |  
 |  SSIIDDEE__SSEELLLL = 'SELL'
 |  
 |  SSPPOOTT__TTOO__CCOOIINN__FFUUTTUURREE = 'MAIN_CMFUTURE'
 |  
 |  SSPPOOTT__TTOO__FFIIAATT = 'MAIN_C2C'
 |  
 |  SSPPOOTT__TTOO__MMAARRGGIINN__CCRROOSSSS = 'MAIN_MARGIN'
 |  
 |  SSPPOOTT__TTOO__MMIINNIINNGG = 'MAIN_MINING'
 |  
 |  SSPPOOTT__TTOO__UUSSDDTT__FFUUTTUURREE = 'MAIN_UMFUTURE'
 |  
 |  SSYYMMBBOOLL__TTYYPPEE__SSPPOOTT = 'SPOT'
 |  
 |  TTIIMMEE__IINN__FFOORRCCEE__FFOOKK = 'FOK'
 |  
 |  TTIIMMEE__IINN__FFOORRCCEE__GGTTCC = 'GTC'
 |  
 |  TTIIMMEE__IINN__FFOORRCCEE__IIOOCC = 'IOC'
 |  
 |  UUSSDDTT__FFUUTTUURREE__TTOO__FFIIAATT = 'UMFUTURE_C2C'
 |  
 |  UUSSDDTT__FFUUTTUURREE__TTOO__MMAARRGGIINN__CCRROOSSSS = 'UMFUTURE_MARGIN'
 |  
 |  UUSSDDTT__FFUUTTUURREE__TTOO__SSPPOOTT = 'UMFUTURE_MAIN'
 |  
 |  WWEEBBSSIITTEE__UURRLL = 'https://www.binance.{}'
